{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5da33f23",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import xgboost as xgb\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score, balanced_accuracy_score, precision_score, recall_score, f1_score, average_precision_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import roc_curve, roc_auc_score\n",
    "import shap\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import train_test_split\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "from sklearn.decomposition import PCA\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0339bbc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_deposits = pd.read_csv('Conversion analysis - 20230512 - deposits_raw.csv')\n",
    "df_login = pd.read_csv('Conversion analysis - 20230512 - login_raw.csv')\n",
    "df_dca_bots_associations = pd.read_csv('Conversion analysis - 20230512 - dca bots association.csv')\n",
    "df_volumes = pd.read_csv('Conversion analysis - 20230512 - volumes_raw.csv')\n",
    "df_exchange_keys = pd.read_csv('Conversion analysis - 20230512 - exchange_keys_raw.csv')\n",
    "df_dca_bot_pnl = pd.read_csv('Conversion analysis - 20230512 - dca_bot_pnl_raw.csv')\n",
    "df_users = pd.read_csv('Conversion analysis - 20230512 - users_raw.csv')\n",
    "df_totalmarketcap = pd.read_csv('totalmarketcap.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22aa3cae",
   "metadata": {},
   "source": [
    "# **1. Data Cleaning**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6d419ed",
   "metadata": {},
   "source": [
    "## **1.1 Data inpsection**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "52f4ddca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1632 entries, 0 to 1631\n",
      "Data columns (total 5 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   user_id           1632 non-null   int64  \n",
      " 1   amount            1632 non-null   float64\n",
      " 2   created_datetime  1632 non-null   object \n",
      " 3   Unnamed: 3        0 non-null      float64\n",
      " 4   Unnamed: 4        1 non-null      object \n",
      "dtypes: float64(2), int64(1), object(2)\n",
      "memory usage: 63.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_deposits.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7af7fba0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>created_datetime</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2021-12-22 17:03:46+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2021-12-30 12:47:12+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>2022-01-26 16:22:52+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2022-01-26 16:23:37+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>11.500000</td>\n",
       "      <td>2022-02-03 12:49:03+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1627</th>\n",
       "      <td>12991</td>\n",
       "      <td>13.900000</td>\n",
       "      <td>2023-05-12 05:17:36.125059+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1628</th>\n",
       "      <td>13131</td>\n",
       "      <td>9.450000</td>\n",
       "      <td>2023-05-12 05:40:13.502713+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1629</th>\n",
       "      <td>3791</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>2023-05-12 10:31:38.247725+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1630</th>\n",
       "      <td>3791</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2023-05-12 10:35:09.39342+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1631</th>\n",
       "      <td>12875</td>\n",
       "      <td>62.500958</td>\n",
       "      <td>2023-05-12 10:52:53.750846+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1632 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id     amount               created_datetime  Unnamed: 3 Unnamed: 4\n",
       "0           1  10.000000         2021-12-22 17:03:46+00         NaN        NaN\n",
       "1           1  11.000000         2021-12-30 12:47:12+00         NaN        NaN\n",
       "2           1  20.000000         2022-01-26 16:22:52+00         NaN        NaN\n",
       "3           1  12.000000         2022-01-26 16:23:37+00         NaN        NaN\n",
       "4           1  11.500000         2022-02-03 12:49:03+00         NaN        NaN\n",
       "...       ...        ...                            ...         ...        ...\n",
       "1627    12991  13.900000  2023-05-12 05:17:36.125059+00         NaN        NaN\n",
       "1628    13131   9.450000  2023-05-12 05:40:13.502713+00         NaN        NaN\n",
       "1629     3791   0.900000  2023-05-12 10:31:38.247725+00         NaN        NaN\n",
       "1630     3791   6.900000   2023-05-12 10:35:09.39342+00         NaN        NaN\n",
       "1631    12875  62.500958  2023-05-12 10:52:53.750846+00         NaN        NaN\n",
       "\n",
       "[1632 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_deposits "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34948a6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "809"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_deposits['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a4989841",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23709 entries, 0 to 23708\n",
      "Data columns (total 4 columns):\n",
      " #   Column               Non-Null Count  Dtype \n",
      "---  ------               --------------  ----- \n",
      " 0   user_id              23709 non-null  int64 \n",
      " 1   registered_datetime  23709 non-null  object\n",
      " 2   browser              23709 non-null  object\n",
      " 3   device               23709 non-null  object\n",
      "dtypes: int64(1), object(3)\n",
      "memory usage: 741.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_login.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9df36734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 14579 entries, 0 to 14578\n",
      "Data columns (total 16 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   subscription_id  14579 non-null  int64  \n",
      " 1   start_datetime   14579 non-null  object \n",
      " 2   end_datetime     10950 non-null  object \n",
      " 3   user_id          14579 non-null  int64  \n",
      " 4   market           14579 non-null  object \n",
      " 5   exchange         14579 non-null  object \n",
      " 6   allocation       14579 non-null  float64\n",
      " 7   max_positions    14579 non-null  int64  \n",
      " 8   strategy_id      14579 non-null  int64  \n",
      " 9   copy_trading     14579 non-null  bool   \n",
      " 10  status           7867 non-null   object \n",
      " 11  isActive         14169 non-null  object \n",
      " 12  isPaperTrading   14169 non-null  object \n",
      " 13  isNoBalance      14169 non-null  object \n",
      " 14  Traded volume    10075 non-null  float64\n",
      " 15  Traded Value     10075 non-null  float64\n",
      "dtypes: bool(1), float64(3), int64(4), object(8)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df_dca_bots_associations.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a0684b57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 107285 entries, 0 to 107284\n",
      "Data columns (total 7 columns):\n",
      " #   Column             Non-Null Count   Dtype  \n",
      "---  ------             --------------   -----  \n",
      " 0   subscription_id    107285 non-null  int64  \n",
      " 1   subscription_id.1  107285 non-null  int64  \n",
      " 2   traded_volume      107285 non-null  float64\n",
      " 3   user_id            107285 non-null  int64  \n",
      " 4   start_date         107285 non-null  object \n",
      " 5   end_date           107285 non-null  object \n",
      " 6   is_fee_paid        107285 non-null  bool   \n",
      "dtypes: bool(1), float64(1), int64(3), object(2)\n",
      "memory usage: 5.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df_volumes.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b4db767a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9293 entries, 0 to 9292\n",
      "Data columns (total 6 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Unnamed: 0         8896 non-null   float64\n",
      " 1   added_timestamp    9293 non-null   object \n",
      " 2   updated_timestamp  447 non-null    object \n",
      " 3   user_id            9293 non-null   int64  \n",
      " 4   exchange_name      9293 non-null   object \n",
      " 5   deleted            9293 non-null   bool   \n",
      "dtypes: bool(1), float64(1), int64(1), object(3)\n",
      "memory usage: 372.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_exchange_keys.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f3893df2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 101741 entries, 0 to 101740\n",
      "Data columns (total 7 columns):\n",
      " #   Column           Non-Null Count   Dtype  \n",
      "---  ------           --------------   -----  \n",
      " 0   Unnamed: 0       0 non-null       float64\n",
      " 1   subscription_id  101741 non-null  int64  \n",
      " 2   pnl              101741 non-null  float64\n",
      " 3   start_date       101741 non-null  object \n",
      " 4   end_date         101741 non-null  object \n",
      " 5   user_id          101741 non-null  int64  \n",
      " 6   is_fee_paid      101740 non-null  object \n",
      "dtypes: float64(2), int64(2), object(3)\n",
      "memory usage: 5.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df_dca_bot_pnl.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ad026cf4",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23709 entries, 0 to 23708\n",
      "Data columns (total 4 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   user_id              23707 non-null  object \n",
      " 1   registered_datetime  13328 non-null  object \n",
      " 2   credits              13328 non-null  float64\n",
      " 3   rewards              13328 non-null  float64\n",
      "dtypes: float64(2), object(2)\n",
      "memory usage: 741.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_users.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "444f07b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13797"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_users['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "692f21c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1837 entries, 0 to 1836\n",
      "Data columns (total 17 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   timestamp                 1837 non-null   object \n",
      " 1   searchInterval            1837 non-null   int64  \n",
      " 2   btcDominance              1837 non-null   float64\n",
      " 3   ethDominance              1837 non-null   float64\n",
      " 4   activeCryptocurrencies    736 non-null    float64\n",
      " 5   activeExchanges           717 non-null    float64\n",
      " 6   activeMarketPairs         736 non-null    float64\n",
      " 7   name                      1 non-null      object \n",
      " 8   totalMarketCap            1837 non-null   float64\n",
      " 9   totalVolume24H            1837 non-null   float64\n",
      " 10  totalVolume24HReported    1837 non-null   float64\n",
      " 11  altcoinVolume24H          1837 non-null   float64\n",
      " 12  altcoinVolume24HReported  1837 non-null   float64\n",
      " 13  altcoinMarketCap          1837 non-null   float64\n",
      " 14  originalScore             1656 non-null   float64\n",
      " 15  originId                  285 non-null    float64\n",
      " 16  score                     1837 non-null   float64\n",
      "dtypes: float64(14), int64(1), object(2)\n",
      "memory usage: 244.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df_totalmarketcap.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aab24de",
   "metadata": {},
   "source": [
    "## **1.2 Replace missing values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d042b840",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 14579 entries, 0 to 14578\n",
      "Data columns (total 16 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   subscription_id  14579 non-null  int64  \n",
      " 1   start_datetime   14579 non-null  object \n",
      " 2   end_datetime     10950 non-null  object \n",
      " 3   user_id          14579 non-null  int64  \n",
      " 4   market           14579 non-null  object \n",
      " 5   exchange         14579 non-null  object \n",
      " 6   allocation       14579 non-null  float64\n",
      " 7   max_positions    14579 non-null  int64  \n",
      " 8   strategy_id      14579 non-null  int64  \n",
      " 9   copy_trading     14579 non-null  bool   \n",
      " 10  status           7867 non-null   object \n",
      " 11  isActive         14169 non-null  object \n",
      " 12  isPaperTrading   14169 non-null  object \n",
      " 13  isNoBalance      14169 non-null  object \n",
      " 14  Traded volume    10075 non-null  float64\n",
      " 15  Traded Value     14579 non-null  float64\n",
      "dtypes: bool(1), float64(3), int64(4), object(8)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Replace missing values in the \"Traded Value\" column with 0 \n",
    "df_dca_bots_associations['Traded Value'] = df_dca_bots_associations['Traded Value'].fillna(0)\n",
    "df_dca_bots_associations.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc999d1",
   "metadata": {},
   "source": [
    "## **1.3 Remove outdated values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4d6c6aa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter out users who registered before 2022-09-01 to optimize the results \n",
    "# Convert 'registered_date' column to datetime\n",
    "df_users['registered_datetime'] = pd.to_datetime(df_users['registered_datetime'])\n",
    "df_users = df_users[df_users['registered_datetime'] >= '2022-09-01']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "61f1c643",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter out users who deposited before 2022-09-01 to optimize the results\n",
    "# Convert 'registered_date' column to datetime\n",
    "df_deposits['created_datetime'] = pd.to_datetime(df_deposits['created_datetime'])\n",
    "df_deposits = df_deposits[df_deposits['created_datetime'] >= '2022-09-01']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f839f78",
   "metadata": {},
   "source": [
    "## **1.4 Data type conversion**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cef64f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "df_users['user_id'] = df_users['user_id'].astype(str)\n",
    "df_deposits['user_id'] = df_deposits['user_id'].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f339d0a",
   "metadata": {},
   "source": [
    "# **2. Data Exploration**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0508069",
   "metadata": {},
   "source": [
    "## **2.1 Total deposits**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "de746a23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1         17.11\n",
       "10036     19.07\n",
       "10053     13.00\n",
       "10073    200.00\n",
       "1011      40.00\n",
       "          ...  \n",
       "9674      11.05\n",
       "9712     120.00\n",
       "9730     287.52\n",
       "979       77.08\n",
       "988       50.00\n",
       "Name: amount, Length: 598, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The total amount of deposits by users\n",
    "deposits_amount_by_user_id = df_deposits.groupby(['user_id'])['amount'].sum().round(2)\n",
    "deposits_amount_by_user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e9b5dc1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute mean and median value \n",
    "mean_deposit = np.mean(deposits_amount_by_user_id)\n",
    "median_deposit = np.median(deposits_amount_by_user_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5abfb693",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean value of total depostits: 166.01643812709037\n",
      "Median value of total depostits: 48.989999999999995\n"
     ]
    }
   ],
   "source": [
    "# Plot the total amount of deposits by users\n",
    "plt.figure(figsize=(10, 8))\n",
    "plt.hist(deposits_amount_by_user_id, bins=100)\n",
    "plt.xlabel('Total amount of Deposits')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of the amount of Total Deposits by User')\n",
    "plt.axvline(mean_deposit, color='purple', linestyle='dashed', linewidth=1, label='Mean')\n",
    "plt.axvline(median_deposit, color='red', linestyle='dashed', linewidth=1, label='Median')\n",
    "plt.show()\n",
    "\n",
    "print('Mean value of total depostits:', mean_deposit)\n",
    "print('Median value of total depostits:', median_deposit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "52f4991d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1         7\n",
       "10036     1\n",
       "10053     1\n",
       "10073     2\n",
       "1011      2\n",
       "         ..\n",
       "9674      1\n",
       "9712      2\n",
       "9730     13\n",
       "979       2\n",
       "988       1\n",
       "Name: created_datetime, Length: 598, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of deposits made by users\n",
    "deposits_times_by_user_id = df_deposits.groupby(['user_id'])['created_datetime'].count()\n",
    "deposits_times_by_user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "11fa997b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute mean and median\n",
    "mean_deposit_times = np.mean(deposits_times_by_user_id)\n",
    "median_deposit_times = np.median(deposits_times_by_user_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98d7e200",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean value of total depostits: 2.0785953177257523\n",
      "Median value of total depostits: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Plot the number of deposits made by users\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(deposits_times_by_user_id, bins=100)\n",
    "plt.xlabel('The no. of Deposits made')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of the number of Total Deposits by User')\n",
    "plt.axvline(mean_deposit_times, color='purple', linestyle='dashed', linewidth=1, label='Mean')\n",
    "plt.axvline(median_deposit_times, color='red', linestyle='dashed', linewidth=1, label='Median')\n",
    "plt.show()\n",
    "\n",
    "print('Mean value of total depostits:', mean_deposit_times)\n",
    "print('Median value of total depostits:', median_deposit_times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "110af927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99277.8"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The total amount of deposits\n",
    "deposits_total = df_deposits['amount'].sum().round(2)\n",
    "deposits_total"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a1fcc0e",
   "metadata": {},
   "source": [
    "## **2.2 Login summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d2a5de98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2498     216\n",
       "5888     131\n",
       "10384    111\n",
       "2        105\n",
       "6199     100\n",
       "        ... \n",
       "9578       1\n",
       "9577       1\n",
       "2860       1\n",
       "9567       1\n",
       "13593      1\n",
       "Name: user_id, Length: 7619, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of login by users\n",
    "login_counts = df_login['user_id'].value_counts()\n",
    "login_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b162fb2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute mean and median\n",
    "mean_login = np.mean(login_counts)\n",
    "median_login = np.median(login_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "fc940c21",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_signup = 11742"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7a21dcd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of which logged in once: 7619 , 64.89%\n",
      "Of which logged in more than once: 2654 , 22.60%\n",
      "Of which logged in more than twice: 1586 , 13.51%\n",
      "Of which logged in more than 5 times: 810 , 6.90%\n",
      "Of which logged in more than 10 times: 451 , 3.84%\n"
     ]
    }
   ],
   "source": [
    "# Compute the percentage of log in times\n",
    "login_1 = len(login_counts[login_counts > 0])\n",
    "login_more_1 = len(login_counts[login_counts > 1])\n",
    "login_more_2 = len(login_counts[login_counts > 2])\n",
    "login_more_5 = len(login_counts[login_counts > 5])\n",
    "login_more_10 = len(login_counts[login_counts > 10])\n",
    "\n",
    "print('Of which logged in once:', login_1,',', '{:.2f}%'.format((login_1/total_signup)*100))\n",
    "print('Of which logged in more than once:', login_more_1,',', '{:.2f}%'.format((login_more_1/total_signup)*100))\n",
    "print('Of which logged in more than twice:', login_more_2,',', '{:.2f}%'.format((login_more_2/total_signup)*100))\n",
    "print('Of which logged in more than 5 times:', login_more_5,',', '{:.2f}%'.format((login_more_5/total_signup)*100))\n",
    "print('Of which logged in more than 10 times:', login_more_10,',', '{:.2f}%'.format((login_more_10/total_signup)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dc203378",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean number of logins by users: 3.1118256989106183\n",
      "Median number of logins by users: 1.0\n"
     ]
    }
   ],
   "source": [
    "values = [login_1, login_more_1, login_more_2, login_more_5, login_more_10]\n",
    "labels = ['Once', 'More than once', 'More than twice', 'More than 5 times', 'More than 10 times']\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(labels, values)\n",
    "plt.xlabel('Number of Logins')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('Distribution of Number of Logins by Users')\n",
    "plt.axvline(mean_login, color='purple', linestyle='dashed', linewidth=1, label='Mean')\n",
    "plt.axvline(median_login, color='red', linestyle='dashed', linewidth=1, label='Median')\n",
    "plt.show()\n",
    "\n",
    "print('Mean number of logins by users:', mean_login)\n",
    "print('Median number of logins by users:', median_login)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a6a56f9",
   "metadata": {},
   "source": [
    "## **2.3 DCA bots associations**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f50de3b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "market\n",
      "FUTURES     3294\n",
      "SPOT       11285\n",
      "Name: market, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Plot the distribution of market types\n",
    "# Group the data by the \"market\" column and count the values\n",
    "market_counts = df_dca_bots_associations.groupby('market')['market'].count()\n",
    "\n",
    "plt.pie(market_counts, labels=market_counts.index, autopct='%1.1f%%')\n",
    "plt.title('Distribution of Market Types')\n",
    "plt.show()\n",
    "\n",
    "print(market_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a893d12f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "exchange\n",
       "binance                  4898\n",
       "binance_paper_trading    3997\n",
       "binance_us                413\n",
       "bitget                    115\n",
       "bybit                     967\n",
       "coinbase                    5\n",
       "coinbasepro               135\n",
       "cryptocom                 110\n",
       "ftx                       230\n",
       "huobi                      26\n",
       "kucoin                   1600\n",
       "kucoin_futures            672\n",
       "mexc                      234\n",
       "okx                       329\n",
       "woo                       848\n",
       "Name: exchange, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_counts_1 = df_dca_bots_associations.groupby('exchange')['exchange'].count()\n",
    "exchange_counts_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fa4576c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "binance                   33.6%\n",
       "binance_paper_trading    27.42%\n",
       "kucoin                   10.97%\n",
       "bybit                     6.63%\n",
       "woo                       5.82%\n",
       "kucoin_futures            4.61%\n",
       "binance_us                2.83%\n",
       "okx                       2.26%\n",
       "mexc                      1.61%\n",
       "ftx                       1.58%\n",
       "coinbasepro               0.93%\n",
       "bitget                    0.79%\n",
       "cryptocom                 0.75%\n",
       "huobi                     0.18%\n",
       "coinbase                  0.03%\n",
       "Name: exchange, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_counts = df_dca_bots_associations['exchange'].value_counts(normalize=True) * 100\n",
    "exchange_pct = exchange_counts.apply(lambda x: f'{round(x, 2)}%')\n",
    "exchange_pct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a45252d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exchange_counts.plot(kind='bar')\n",
    "plt.xlabel('Exchange')\n",
    "plt.ylabel('Percentage')\n",
    "plt.title('Distribution of Exchange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b72f6915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Active Users: 3629 Inactive Users: 10950\n",
      "Paper Trading Users: 3997 Non-Paper Trading Users: 14579\n",
      "Users with Balance: 14579 Users without Balance: 1155\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Count the number of users in each category\n",
    "active_users = df_dca_bots_associations['end_datetime'].isna().sum()\n",
    "inactive_users = df_dca_bots_associations['end_datetime'].notna().sum()\n",
    "\n",
    "paper_trading_users = df_dca_bots_associations['exchange'].str.contains('binance_paper_trading').sum()\n",
    "non_paper_trading_users = df_dca_bots_associations['exchange'].str.contains('binance_paper_trading').notna().sum()\n",
    "\n",
    "no_balance_users = df_dca_bots_associations['status'].str.contains('paused').sum()\n",
    "balance_users = df_dca_bots_associations['status'].isna().sum() + df_dca_bots_associations['status'].str.contains('paused').notna().sum()\n",
    "\n",
    "print(\"Active Users:\", active_users, \"Inactive Users:\", inactive_users)\n",
    "print(\"Paper Trading Users:\", paper_trading_users, \"Non-Paper Trading Users:\", non_paper_trading_users)\n",
    "print(\"Users with Balance:\", balance_users, \"Users without Balance:\", no_balance_users)\n",
    "\n",
    "fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(12, 5))\n",
    "ax1.pie([active_users, inactive_users], labels=['Active Users', 'Inactive Users'], autopct='%1.1f%%')\n",
    "ax1.set_title('User Activity')\n",
    "ax2.pie([paper_trading_users, non_paper_trading_users], labels=['Paper Trading', 'Real Trading'], autopct='%1.1f%%')\n",
    "ax2.set_title('Trading Type')\n",
    "ax3.pie([no_balance_users, balance_users], labels=['No Balance', 'Balance'], autopct='%1.1f%%')\n",
    "ax3.set_title('User Balance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f3d1708",
   "metadata": {},
   "source": [
    "## **2.4 Volume summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "31776391",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total volume traded for paper trading users:  2635247169258.76\n",
      "Total volume traded for non-paper trading users:  85483766.24\n",
      "Total volume traded for all users:  2635332653025.0\n"
     ]
    }
   ],
   "source": [
    "# Calculate total volume traded for paper trading users\n",
    "paper_total_volume = df_dca_bots_associations.loc[df_dca_bots_associations['exchange'] == 'binance_paper_trading', 'Traded Value'].sum()\n",
    "\n",
    "# Calculate total volume traded for non-paper trading users\n",
    "real_total_volume = df_dca_bots_associations.loc[df_dca_bots_associations['exchange'] != 'binance_paper_trading', 'Traded Value'].sum()\n",
    "\n",
    "# Calculate total volume traded for all users\n",
    "total_volume = df_dca_bots_associations['Traded Value'].sum()\n",
    "\n",
    "print(\"Total volume traded for paper trading users: \", paper_total_volume)\n",
    "print(\"Total volume traded for non-paper trading users: \", real_total_volume)\n",
    "print(\"Total volume traded for all users: \", total_volume)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc2902f",
   "metadata": {},
   "source": [
    "## **2.5 Exchange Keys Summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b0ffc8aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3146"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_user_count = len(df_exchange_keys['user_id'].unique())\n",
    "total_user_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5311085d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2405"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop the rows where the exchange key connected are not active\n",
    "df_exchange_keys_active = df_exchange_keys[df_exchange_keys['deleted'] != True]\n",
    "\n",
    "# Count the number of unique active user\n",
    "active_user_count = len(df_exchange_keys_active['user_id'].unique())\n",
    "active_user_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4e6d7bfb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exchange_name\n",
      "binance           1303\n",
      "kucoin             465\n",
      "bybit              413\n",
      "woo                234\n",
      "kucoin_futures     201\n",
      "mexc               158\n",
      "binance_us         127\n",
      "okx                112\n",
      "coinbasepro         51\n",
      "bitget              49\n",
      "cryptocom           46\n",
      "huobi               22\n",
      "coinbase            10\n",
      "Name: user_id, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Group by exchange_name and count the number of rows\n",
    "exchange_key_counts = df_exchange_keys[df_exchange_keys['deleted'] == False].groupby('exchange_name')['user_id'].count()\n",
    "exchange_key_counts_sorted = exchange_key_counts.sort_values(ascending=False)\n",
    "print(exchange_key_counts_sorted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "eb2c9090",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exchange_key_counts_sorted.plot(kind='bar')\n",
    "plt.xlabel('Exchange')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Distribution of Exchange key')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e75140c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exchange_name\n",
      "binance           40.83%\n",
      "kucoin            14.57%\n",
      "bybit             12.94%\n",
      "woo                7.33%\n",
      "kucoin_futures      6.3%\n",
      "mexc               4.95%\n",
      "binance_us         3.98%\n",
      "okx                3.51%\n",
      "coinbasepro         1.6%\n",
      "bitget             1.54%\n",
      "cryptocom          1.44%\n",
      "huobi              0.69%\n",
      "coinbase           0.31%\n",
      "Name: user_id, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Calculate the percentage of active exchanges\n",
    "total_count = exchange_key_counts_sorted.sum()\n",
    "exchange_percentages = ((exchange_key_counts_sorted / total_count) * 100)\n",
    "exchange_percentages_print = exchange_percentages.apply(lambda x: f'{round(x, 2)}%')\n",
    "print(exchange_percentages_print)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d014921b",
   "metadata": {},
   "source": [
    "## **2.6 DCA bot P&L Summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e0aedc2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>subscription_id</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pnl</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-4.512294e+04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>201</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-2.852271e+04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>990</td>\n",
       "      <td>1551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1.684009e+04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>814</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1.598546e+04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>776</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1.339316e+04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>201</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.144473e+05</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2756</td>\n",
       "      <td>3730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.263560e+05</th>\n",
       "      <td>0.0</td>\n",
       "      <td>13069</td>\n",
       "      <td>12405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.647253e+09</th>\n",
       "      <td>0.0</td>\n",
       "      <td>7177</td>\n",
       "      <td>7505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.914146e+09</th>\n",
       "      <td>0.0</td>\n",
       "      <td>7177</td>\n",
       "      <td>7505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.692564e+09</th>\n",
       "      <td>0.0</td>\n",
       "      <td>7177</td>\n",
       "      <td>7505</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95408 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Unnamed: 0  subscription_id  user_id\n",
       "pnl                                                \n",
       "-4.512294e+04         0.0              201       79\n",
       "-2.852271e+04         0.0              990     1551\n",
       "-1.684009e+04         0.0              814      159\n",
       "-1.598546e+04         0.0              776      159\n",
       "-1.339316e+04         0.0              201       79\n",
       "...                   ...              ...      ...\n",
       " 1.144473e+05         0.0             2756     3730\n",
       " 3.263560e+05         0.0            13069    12405\n",
       " 3.647253e+09         0.0             7177     7505\n",
       " 3.914146e+09         0.0             7177     7505\n",
       " 7.692564e+09         0.0             7177     7505\n",
       "\n",
       "[95408 rows x 3 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_grouped_pnl = df_dca_bot_pnl.groupby(by =['pnl']).sum()\n",
    "df_grouped_pnl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3504df46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Profits from paper trading</th>\n",
       "      <th>Profits from real trading</th>\n",
       "      <th>Total profits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1997.04</td>\n",
       "      <td>1421.93</td>\n",
       "      <td>3418.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9073.57</td>\n",
       "      <td>1733.57</td>\n",
       "      <td>10807.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>28579.35</td>\n",
       "      <td>10122.76</td>\n",
       "      <td>38702.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>-393.15</td>\n",
       "      <td>-4868.73</td>\n",
       "      <td>-5261.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>-1218.46</td>\n",
       "      <td>7719.72</td>\n",
       "      <td>6501.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13012</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13014</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-9.51</td>\n",
       "      <td>-9.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13031</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.77</td>\n",
       "      <td>-0.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13045</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.54</td>\n",
       "      <td>1.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13080</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.17</td>\n",
       "      <td>3.17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2331 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Profits from paper trading  Profits from real trading  Total profits\n",
       "user_id                                                                      \n",
       "2                           1997.04                    1421.93        3418.97\n",
       "3                           9073.57                    1733.57       10807.14\n",
       "60                         28579.35                   10122.76       38702.11\n",
       "81                          -393.15                   -4868.73       -5261.88\n",
       "83                         -1218.46                    7719.72        6501.26\n",
       "...                             ...                        ...            ...\n",
       "13012                           NaN                      -0.08          -0.08\n",
       "13014                           NaN                      -9.51          -9.51\n",
       "13031                           NaN                      -0.77          -0.77\n",
       "13045                           NaN                       1.54           1.54\n",
       "13080                           NaN                       3.17           3.17\n",
       "\n",
       "[2331 rows x 3 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_grouped_pnl = df_dca_bot_pnl.groupby('subscription_id')['pnl'].sum()\n",
    "\n",
    "# Merge the data frames on user_id\n",
    "pnl_merged = pd.merge(df_dca_bots_associations, df_grouped_pnl, on='subscription_id')\n",
    "\n",
    "# Compute the profits by user and trading type\n",
    "profits_paper = pnl_merged.loc[pnl_merged['exchange'] == 'binance_paper_trading'].groupby('user_id')['pnl'].sum().round(2)\n",
    "profits_real = pnl_merged.loc[pnl_merged['exchange'] != 'binance_paper_trading'].groupby('user_id')['pnl'].sum().round(2)\n",
    "profits_total = pnl_merged.groupby('user_id')['pnl'].sum().round(2)\n",
    "\n",
    "# Combine the results into a new data frame\n",
    "df_profits = pd.concat([profits_paper, profits_real, profits_total], axis=1)\n",
    "df_profits.fillna(0)\n",
    "df_profits.columns = ['Profits from paper trading', 'Profits from real trading', 'Total profits']\n",
    "\n",
    "df_profits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "599b9cac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P&L from paper trading 15254752549.48\n",
      "P&L from real trading 158134.08\n",
      "P&L from paper & real trading 15254910683.57\n"
     ]
    }
   ],
   "source": [
    "print('P&L from paper trading', profits_paper.sum().round(2))\n",
    "print('P&L from real trading', profits_real.sum().round(2))\n",
    "print('P&L from paper & real trading', profits_total.sum().round(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc61f7cc",
   "metadata": {},
   "source": [
    "## **2.7 Credits and Rewards Summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3b3edf2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Credits Bucket\n",
      "[0; 5]       601\n",
      "[5; 10]     8463\n",
      "[10; 20]     109\n",
      "[20; 50]     118\n",
      "[50;]        128\n",
      "Name: user_id, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rewards Bucket\n",
      "[0; 5]      10065\n",
      "[5; 10]         3\n",
      "[10; 20]        2\n",
      "[20; 50]        4\n",
      "[50;]           5\n",
      "Name: user_id, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Plot user counts per credits bucket\n",
    "buckets = [0, 5, 10, 20, 50, float('inf')]\n",
    "labels = ['[0; 5]', '[5; 10]', '[10; 20]', '[20; 50]', '[50;]']\n",
    "\n",
    "df_users['Credits Bucket'] = pd.cut(df_users['credits'], bins=buckets, labels=labels, right=False)\n",
    "df_users['Rewards Bucket'] = pd.cut(df_users['rewards'], bins=buckets, labels=labels, right=False)\n",
    "\n",
    "credits_counts = df_users.groupby('Credits Bucket')['user_id'].count()\n",
    "rewards_counts = df_users.groupby('Rewards Bucket')['user_id'].count()\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(credits_counts.index, credits_counts.values)\n",
    "plt.xlabel('Credits Bucket')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Counts per Credits Bucket')\n",
    "plt.show()\n",
    "print(credits_counts)\n",
    "\n",
    "plt.figure(figsize=(15, 10))\n",
    "plt.bar(rewards_counts.index, rewards_counts.values)\n",
    "plt.xlabel('Rewards Bucket')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Counts per Rewards Bucket')\n",
    "plt.show()\n",
    "print(rewards_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0976bfe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of active users with credits: 2036\n",
      "The number of inactive users with credits: 7110\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of active users without credits: 3\n",
      "The number of inactive users without credits: 11\n"
     ]
    }
   ],
   "source": [
    "df_dca_bots_associations['user_id'] = df_dca_bots_associations['user_id'].astype(str)\n",
    "df_dca_bot_pnl['user_id'] = df_dca_bot_pnl['user_id'].astype(str)\n",
    "merged_df = pd.merge(df_dca_bots_associations, df_users, on='user_id')\n",
    "\n",
    "# Filter users with credits and determine active/inactive status\n",
    "users_with_credits = merged_df[merged_df['credits'] > 0]\n",
    "active_users_with_credits = users_with_credits[users_with_credits['end_datetime'].isnull()]\n",
    "inactive_users_with_credits = users_with_credits[users_with_credits['end_datetime'].notnull()]\n",
    "\n",
    "# Filter users without credits and determine active/inactive status\n",
    "users_without_credits = merged_df[merged_df['credits'] == 0]\n",
    "active_users_without_credits = users_without_credits[users_without_credits['end_datetime'].isnull()]\n",
    "inactive_users_without_credits = users_without_credits[users_without_credits['end_datetime'].notnull()]\n",
    "\n",
    "# Count the number of users in each category\n",
    "active_users_with_credits_count = len(active_users_with_credits)\n",
    "inactive_users_with_credits_count = len(inactive_users_with_credits)\n",
    "active_users_without_credits_count = len(active_users_without_credits)\n",
    "inactive_users_without_credits_count = len(inactive_users_without_credits)\n",
    "\n",
    "# Plot the number of users with credits\n",
    "categories_with_credits = ['Active Users', 'Inactive Users']\n",
    "counts_with_credits = [active_users_with_credits_count, inactive_users_with_credits_count]\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(categories_with_credits, counts_with_credits)\n",
    "plt.xlabel('User Category')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Category Count (With Credits)')\n",
    "plt.show()\n",
    "print('The number of active users with credits:', active_users_with_credits_count)\n",
    "print('The number of inactive users with credits:', inactive_users_with_credits_count)\n",
    "\n",
    "# Plot the number of users without credits\n",
    "categories_without_credits = ['Active Users', 'Inactive Users']\n",
    "counts_without_credits = [active_users_without_credits_count, inactive_users_without_credits_count]\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(categories_without_credits, counts_without_credits)\n",
    "plt.xlabel('User Category')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Category Count (Without Credits)')\n",
    "plt.show()\n",
    "print('The number of active users without credits:', active_users_without_credits_count)\n",
    "print('The number of inactive users without credits:', inactive_users_without_credits_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "fda26c7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of active users with rewards: 156\n",
      "The number of inactive users with rewards: 935\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of active users without rewards: 2878\n",
      "The number of inactive users without rewards: 7300\n"
     ]
    }
   ],
   "source": [
    "# Filter users with rewards and determine active/inactive status\n",
    "users_with_rewards = merged_df[merged_df['rewards'] > 0]\n",
    "active_users_with_rewards = users_with_rewards[users_with_rewards['end_datetime'].isnull()]\n",
    "inactive_users_with_rewards = users_with_rewards[users_with_rewards['end_datetime'].notnull()]\n",
    "\n",
    "# Filter users without rewards and determine active/inactive status\n",
    "users_without_rewards = merged_df[merged_df['rewards'] == 0]\n",
    "active_users_without_rewards = users_without_rewards[users_without_rewards['end_datetime'].isnull()]\n",
    "inactive_users_without_rewards = users_without_rewards[users_without_rewards['end_datetime'].notnull()]\n",
    "\n",
    "# Count the number of users in each category\n",
    "active_users_with_rewards_count = len(active_users_with_rewards)\n",
    "inactive_users_with_rewards_count = len(inactive_users_with_rewards)\n",
    "active_users_without_rewards_count = len(active_users_without_rewards)\n",
    "inactive_users_without_rewards_count = len(inactive_users_without_rewards)\n",
    "\n",
    "# Plot the number of users with rewards\n",
    "categories_with_rewards = ['Active Users', 'Inactive Users']\n",
    "counts_with_rewards = [active_users_with_rewards_count, inactive_users_with_rewards_count]\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(categories_with_rewards, counts_with_rewards)\n",
    "plt.xlabel('User Category')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Category Count (With Rewards)')\n",
    "plt.show()\n",
    "print('The number of active users with rewards:', active_users_with_rewards_count)\n",
    "print('The number of inactive users with rewards:', inactive_users_with_rewards_count)\n",
    "\n",
    "# Plot the number of users without rewards\n",
    "categories_without_rewards = ['Active Users', 'Inactive Users']\n",
    "counts_without_rewards = [active_users_without_rewards_count, inactive_users_without_rewards_count]\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(categories_without_rewards, counts_without_rewards)\n",
    "plt.xlabel('User Category')\n",
    "plt.ylabel('Number of Users')\n",
    "plt.title('User Category Count (Without Rewards)')\n",
    "plt.show()\n",
    "print('The number of active users without rewards:', active_users_without_rewards_count)\n",
    "print('The number of inactive users without rewards:', inactive_users_without_rewards_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10b9fee7",
   "metadata": {},
   "source": [
    "## **2.8 Market data summary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4d735ddb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_totalmarketcap.reset_index(inplace=True)\n",
    "df_totalmarketcap_alt = df_totalmarketcap[['timestamp', 'altcoinMarketCap']].copy()\n",
    "\n",
    "df_totalmarketcap_alt['timestamp'] = pd.to_datetime(df_totalmarketcap_alt['timestamp'])\n",
    "df_totalmarketcap_alt.set_index('timestamp', inplace=True)\n",
    "\n",
    "# Sum the \"altcoinMarketCap\" column by week\n",
    "weekly_sum = df_totalmarketcap_alt['altcoinMarketCap'].resample('W').sum()\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(weekly_sum.index, weekly_sum)\n",
    "plt.xlabel('Timestamp')\n",
    "plt.ylabel('Weekly Altcoin Market Cap')\n",
    "plt.title('Weekly Altcoin Market Cap Trend')\n",
    "plt.gca().get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,.0f}\".format(x)))\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0314b4fc",
   "metadata": {},
   "source": [
    "# **3. Feature Engineering**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d99bf2b",
   "metadata": {},
   "source": [
    "## **3.1 Define the dependent variable**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e5f6ea63",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    504.000000\n",
      "mean      19.986111\n",
      "std       34.007978\n",
      "min        0.000000\n",
      "25%        1.000000\n",
      "50%        7.000000\n",
      "75%       23.000000\n",
      "max      229.000000\n",
      "Name: days_elapsed, dtype: float64\n",
      "Median: 7.0\n"
     ]
    }
   ],
   "source": [
    "# Group by 'user_id' and find the date of first deposit\n",
    "df_deposits_label = df_deposits.groupby('user_id')['created_datetime'].min().reset_index()\n",
    "\n",
    "# Merge the two dataframes on 'user_id'\n",
    "df_label = pd.merge(df_users, df_deposits_label, on='user_id', how='outer')\n",
    "df_label['registered_datetime'] = pd.to_datetime(df_label['registered_datetime'])\n",
    "df_label['created_datetime'] = pd.to_datetime(df_label['created_datetime'])\n",
    "\n",
    "# Calculate the days elapsed\n",
    "df_label['days_elapsed'] = (df_label['created_datetime'] - df_label['registered_datetime']).dt.days\n",
    "\n",
    "# Analyze the distribution of days elapsed\n",
    "days_elapsed = df_label['days_elapsed'].describe()\n",
    "median_days = df_label['days_elapsed'].median()\n",
    "\n",
    "print(days_elapsed)\n",
    "print('Median:', median_days)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "dda4df91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a histogram of the days elapsed\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.hist(df_label['days_elapsed'], bins=120)\n",
    "plt.xlabel('Days Elapsed')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of days elapsed between account registration and first deposit made')\n",
    "\n",
    "mean_days = df_label['days_elapsed'].mean()\n",
    "median_days = df_label['days_elapsed'].median()\n",
    "\n",
    "plt.axvline(mean_days, color='red', linestyle='--', label='Mean')\n",
    "plt.axvline(median_days, color='blue', linestyle='--', label='Median')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f35f63e3",
   "metadata": {},
   "source": [
    "Based on the analysis, it can be observed that approximately 75% of users tend to make their first deposits within 23 days from the day they registered their account. This information is valuable for defining a dependent variable, specifically, the identification of churned users who fail to make their first deposit within 23 days.\n",
    "\n",
    "By setting the threshold of 23 days, we can classify users who do not make their first deposit within this timeframe as churned users. This allows for the creation of a binary variable where users are labeled as either churned (1) or converted (0) based on their deposit activity within the specified period.\n",
    "\n",
    "Utilizing this dependent variable, further analysis and modeling can be conducted to understand the factors and behaviors associated with churned users, with the aim of developing strategies to improve conversion and encourage early deposit activity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b08e1946",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Convert the dependent variables into binary\n",
    "df_label['converted'] = np.where(df_label['days_elapsed'] < 23, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2f481304",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_label['registered_datetime'] = pd.to_datetime(df_label['registered_datetime'])\n",
    "\n",
    "weekly_conversion_count = df_label[df_label['converted'] == 1].groupby(pd.Grouper(key='registered_datetime', freq='W'))['converted'].count()\n",
    "weekly_total_users_count = df_label.groupby(pd.Grouper(key='registered_datetime', freq='W'))['converted'].count()\n",
    "\n",
    "weekly_conversion_ratio = weekly_conversion_count / weekly_total_users_count\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(weekly_conversion_ratio.index, weekly_conversion_ratio.values, marker='o')\n",
    "plt.xlabel('Week')\n",
    "plt.ylabel('Conversion Ratio')\n",
    "plt.title('Conversion Ratio Over Weeks')\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c6b8eb5",
   "metadata": {},
   "source": [
    "## **3.2 Dataset creation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "55a089cb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    9796\n",
      "1     377\n",
      "Name: converted, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Define the churn status by users\n",
    "df_churn_status = df_label[['user_id', 'converted']].copy()\n",
    "conversion_count = df_churn_status['converted'].value_counts()\n",
    "print(conversion_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "20e15f61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_churn_status = df_label[['user_id', 'converted']].copy()\n",
    "conversion_count = df_churn_status['converted'].value_counts()\n",
    "\n",
    "churn_labels = ['Churned', 'Converted']\n",
    "churn_values = conversion_count.values\n",
    "churn_percentages = churn_values / churn_values.sum() * 100\n",
    "\n",
    "plt.bar(churn_labels, churn_percentages)\n",
    "plt.xlabel('Churn Status')\n",
    "plt.ylabel('Percentage')\n",
    "plt.title('Churn vs. Converted Percentage')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "61186845",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>converted</th>\n",
       "      <th>amount</th>\n",
       "      <th>created_datetime</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5889</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6657</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6658</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6661</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6665</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10813</th>\n",
       "      <td>95</td>\n",
       "      <td>0</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>2023-03-05 13:43:35.492000+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10814</th>\n",
       "      <td>951</td>\n",
       "      <td>0</td>\n",
       "      <td>9.300000</td>\n",
       "      <td>2023-04-21 07:10:03.581438+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10815</th>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>2022-09-14 09:20:46.989000+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10816</th>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>52.083384</td>\n",
       "      <td>2023-02-14 14:28:33.484000+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10817</th>\n",
       "      <td>988</td>\n",
       "      <td>0</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>2022-09-04 15:42:27.935000+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10818 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id  converted     amount                 created_datetime  \\\n",
       "0        5889          0        NaN                              NaT   \n",
       "1        6657          0        NaN                              NaT   \n",
       "2        6658          0        NaN                              NaT   \n",
       "3        6661          0        NaN                              NaT   \n",
       "4        6665          0        NaN                              NaT   \n",
       "...       ...        ...        ...                              ...   \n",
       "10813      95          0  30.000000 2023-03-05 13:43:35.492000+00:00   \n",
       "10814     951          0   9.300000 2023-04-21 07:10:03.581438+00:00   \n",
       "10815     979          0  25.000000 2022-09-14 09:20:46.989000+00:00   \n",
       "10816     979          0  52.083384 2023-02-14 14:28:33.484000+00:00   \n",
       "10817     988          0  50.000000 2022-09-04 15:42:27.935000+00:00   \n",
       "\n",
       "       Unnamed: 3 Unnamed: 4  \n",
       "0             NaN        NaN  \n",
       "1             NaN        NaN  \n",
       "2             NaN        NaN  \n",
       "3             NaN        NaN  \n",
       "4             NaN        NaN  \n",
       "...           ...        ...  \n",
       "10813         NaN        NaN  \n",
       "10814         NaN        NaN  \n",
       "10815         NaN        NaN  \n",
       "10816         NaN        NaN  \n",
       "10817         NaN        NaN  \n",
       "\n",
       "[10818 rows x 6 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_deposits = df_churn_status.merge(df_deposits, on='user_id', how='outer')\n",
    "merged_deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "2bda8436",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge df_deposits and df_dca_bot_pnl\n",
    "first_deposits = merged_deposits.groupby('user_id')['created_datetime'].min().reset_index()\n",
    "merged_df = df_dca_bot_pnl.merge(first_deposits, on='user_id', how='outer')\n",
    "merged_df = merged_df.merge(df_dca_bots_associations, on=['user_id', 'subscription_id'], how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a2e50dd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove the data after first deposits made for each user and keep the data for users who did not have any pnl nor dca bots association data\n",
    "filtered_df_pnl = merged_df[(merged_df['start_date'].isnull()) | (merged_df['start_date'] <= merged_df['created_datetime'])]\n",
    "filtered_df_dca = merged_df[(merged_df['start_datetime'].isnull()) | (merged_df['start_datetime'] <= merged_df['created_datetime'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d8ff1af5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>subscription_id</th>\n",
       "      <th>pnl</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>is_fee_paid</th>\n",
       "      <th>created_datetime</th>\n",
       "      <th>start_datetime</th>\n",
       "      <th>end_datetime</th>\n",
       "      <th>...</th>\n",
       "      <th>allocation</th>\n",
       "      <th>max_positions</th>\n",
       "      <th>strategy_id</th>\n",
       "      <th>copy_trading</th>\n",
       "      <th>status</th>\n",
       "      <th>isActive</th>\n",
       "      <th>isPaperTrading</th>\n",
       "      <th>isNoBalance</th>\n",
       "      <th>Traded volume</th>\n",
       "      <th>Traded Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9120</th>\n",
       "      <td>0.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>2091.928450</td>\n",
       "      <td>2022-03-18 00:00:00+00:00</td>\n",
       "      <td>2022-03-19 00:00:00+00:00</td>\n",
       "      <td>83</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-02-06 20:07:53.395000+00:00</td>\n",
       "      <td>2021-10-08 19:25:29.195632+00:00</td>\n",
       "      <td>2022-09-07 20:40:23.891363+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>1228.291200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>83.0</td>\n",
       "      <td>367867.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64939</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>1842.381924</td>\n",
       "      <td>2022-12-13 00:00:00+00:00</td>\n",
       "      <td>2022-12-14 00:00:00+00:00</td>\n",
       "      <td>4793</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-01-01 10:51:55.533000+00:00</td>\n",
       "      <td>2022-12-12 10:21:40.498918+00:00</td>\n",
       "      <td>2023-01-01 10:29:50.572612+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>152941.180000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>896.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>4793.0</td>\n",
       "      <td>308848.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64938</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>1389.354774</td>\n",
       "      <td>2022-12-12 00:00:00+00:00</td>\n",
       "      <td>2022-12-13 00:00:00+00:00</td>\n",
       "      <td>4793</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-01-01 10:51:55.533000+00:00</td>\n",
       "      <td>2022-12-12 10:21:40.498918+00:00</td>\n",
       "      <td>2023-01-01 10:29:50.572612+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>152941.180000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>896.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>4793.0</td>\n",
       "      <td>308848.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9122</th>\n",
       "      <td>0.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>1118.218976</td>\n",
       "      <td>2022-03-24 00:00:00+00:00</td>\n",
       "      <td>2022-03-25 00:00:00+00:00</td>\n",
       "      <td>83</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-02-06 20:07:53.395000+00:00</td>\n",
       "      <td>2021-10-08 19:25:29.195632+00:00</td>\n",
       "      <td>2022-09-07 20:40:23.891363+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>1228.291200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>83.0</td>\n",
       "      <td>367867.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2583</th>\n",
       "      <td>0.0</td>\n",
       "      <td>316.0</td>\n",
       "      <td>930.012929</td>\n",
       "      <td>2021-12-23 00:00:00+00:00</td>\n",
       "      <td>2021-12-24 00:00:00+00:00</td>\n",
       "      <td>60</td>\n",
       "      <td>True</td>\n",
       "      <td>2022-11-04 14:02:19.383000+00:00</td>\n",
       "      <td>2021-12-06 12:04:14.395918+00:00</td>\n",
       "      <td>2022-01-28 15:52:00.693703+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>60.0</td>\n",
       "      <td>40458.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>894</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2269.0</td>\n",
       "      <td>-1339.635234</td>\n",
       "      <td>2023-04-06 00:00:00+00:00</td>\n",
       "      <td>2023-04-07 00:00:00+00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-04-12 12:56:37.114174+00:00</td>\n",
       "      <td>2022-09-28 10:39:53.866907+00:00</td>\n",
       "      <td>2023-04-08 13:48:31.111787+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>6368.000000</td>\n",
       "      <td>10.0</td>\n",
       "      <td>550.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>135278.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4873</th>\n",
       "      <td>0.0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>-1444.346098</td>\n",
       "      <td>2022-11-15 00:00:00+00:00</td>\n",
       "      <td>2022-11-16 00:00:00+00:00</td>\n",
       "      <td>1173</td>\n",
       "      <td>True</td>\n",
       "      <td>2022-11-29 01:19:44.484000+00:00</td>\n",
       "      <td>2022-02-07 15:11:24.215059+00:00</td>\n",
       "      <td>2022-11-15 17:32:06.621786+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>6310.659295</td>\n",
       "      <td>15.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1173.0</td>\n",
       "      <td>109958.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9701</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2885.0</td>\n",
       "      <td>-1669.076443</td>\n",
       "      <td>2022-11-08 00:00:00+00:00</td>\n",
       "      <td>2022-11-09 00:00:00+00:00</td>\n",
       "      <td>83</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-02-06 20:07:53.395000+00:00</td>\n",
       "      <td>2022-11-04 17:04:36.932684+00:00</td>\n",
       "      <td>2022-11-08 13:41:35.129972+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>3924.480000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>83.0</td>\n",
       "      <td>58514.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6733</th>\n",
       "      <td>0.0</td>\n",
       "      <td>458.0</td>\n",
       "      <td>-2345.228693</td>\n",
       "      <td>2022-06-06 00:00:00+00:00</td>\n",
       "      <td>2022-06-07 00:00:00+00:00</td>\n",
       "      <td>1159</td>\n",
       "      <td>True</td>\n",
       "      <td>2022-11-28 07:47:01.937000+00:00</td>\n",
       "      <td>2022-02-01 20:35:03.826836+00:00</td>\n",
       "      <td>2022-06-06 07:47:27.344398+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>10085.760000</td>\n",
       "      <td>20.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1159.0</td>\n",
       "      <td>141782.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562</th>\n",
       "      <td>0.0</td>\n",
       "      <td>819.0</td>\n",
       "      <td>-2841.531322</td>\n",
       "      <td>2022-11-29 00:00:00+00:00</td>\n",
       "      <td>2022-11-30 00:00:00+00:00</td>\n",
       "      <td>229</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-04-09 18:59:12.628896+00:00</td>\n",
       "      <td>2022-03-22 22:01:49.897301+00:00</td>\n",
       "      <td>2022-11-29 19:25:08.627084+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>545.907200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>229.0</td>\n",
       "      <td>72801.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32179 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0  subscription_id          pnl                 start_date  \\\n",
       "9120          0.0            200.0  2091.928450  2022-03-18 00:00:00+00:00   \n",
       "64939         0.0           3692.0  1842.381924  2022-12-13 00:00:00+00:00   \n",
       "64938         0.0           3692.0  1389.354774  2022-12-12 00:00:00+00:00   \n",
       "9122          0.0            200.0  1118.218976  2022-03-24 00:00:00+00:00   \n",
       "2583          0.0            316.0   930.012929  2021-12-23 00:00:00+00:00   \n",
       "...           ...              ...          ...                        ...   \n",
       "894           0.0           2269.0 -1339.635234  2023-04-06 00:00:00+00:00   \n",
       "4873          0.0            560.0 -1444.346098  2022-11-15 00:00:00+00:00   \n",
       "9701          0.0           2885.0 -1669.076443  2022-11-08 00:00:00+00:00   \n",
       "6733          0.0            458.0 -2345.228693  2022-06-06 00:00:00+00:00   \n",
       "5562          0.0            819.0 -2841.531322  2022-11-29 00:00:00+00:00   \n",
       "\n",
       "                        end_date user_id is_fee_paid  \\\n",
       "9120   2022-03-19 00:00:00+00:00      83        True   \n",
       "64939  2022-12-14 00:00:00+00:00    4793        True   \n",
       "64938  2022-12-13 00:00:00+00:00    4793        True   \n",
       "9122   2022-03-25 00:00:00+00:00      83        True   \n",
       "2583   2021-12-24 00:00:00+00:00      60        True   \n",
       "...                          ...     ...         ...   \n",
       "894    2023-04-07 00:00:00+00:00       2        True   \n",
       "4873   2022-11-16 00:00:00+00:00    1173        True   \n",
       "9701   2022-11-09 00:00:00+00:00      83        True   \n",
       "6733   2022-06-07 00:00:00+00:00    1159        True   \n",
       "5562   2022-11-30 00:00:00+00:00     229        True   \n",
       "\n",
       "                       created_datetime                    start_datetime  \\\n",
       "9120   2023-02-06 20:07:53.395000+00:00  2021-10-08 19:25:29.195632+00:00   \n",
       "64939  2023-01-01 10:51:55.533000+00:00  2022-12-12 10:21:40.498918+00:00   \n",
       "64938  2023-01-01 10:51:55.533000+00:00  2022-12-12 10:21:40.498918+00:00   \n",
       "9122   2023-02-06 20:07:53.395000+00:00  2021-10-08 19:25:29.195632+00:00   \n",
       "2583   2022-11-04 14:02:19.383000+00:00  2021-12-06 12:04:14.395918+00:00   \n",
       "...                                 ...                               ...   \n",
       "894    2023-04-12 12:56:37.114174+00:00  2022-09-28 10:39:53.866907+00:00   \n",
       "4873   2022-11-29 01:19:44.484000+00:00  2022-02-07 15:11:24.215059+00:00   \n",
       "9701   2023-02-06 20:07:53.395000+00:00  2022-11-04 17:04:36.932684+00:00   \n",
       "6733   2022-11-28 07:47:01.937000+00:00  2022-02-01 20:35:03.826836+00:00   \n",
       "5562   2023-04-09 18:59:12.628896+00:00  2022-03-22 22:01:49.897301+00:00   \n",
       "\n",
       "                           end_datetime  ...     allocation max_positions  \\\n",
       "9120   2022-09-07 20:40:23.891363+00:00  ...    1228.291200           1.0   \n",
       "64939  2023-01-01 10:29:50.572612+00:00  ...  152941.180000           1.0   \n",
       "64938  2023-01-01 10:29:50.572612+00:00  ...  152941.180000           1.0   \n",
       "9122   2022-09-07 20:40:23.891363+00:00  ...    1228.291200           1.0   \n",
       "2583   2022-01-28 15:52:00.693703+00:00  ...    3000.000000          50.0   \n",
       "...                                 ...  ...            ...           ...   \n",
       "894    2023-04-08 13:48:31.111787+00:00  ...    6368.000000          10.0   \n",
       "4873   2022-11-15 17:32:06.621786+00:00  ...    6310.659295          15.0   \n",
       "9701   2022-11-08 13:41:35.129972+00:00  ...    3924.480000          12.0   \n",
       "6733   2022-06-06 07:47:27.344398+00:00  ...   10085.760000          20.0   \n",
       "5562   2022-11-29 19:25:08.627084+00:00  ...     545.907200           1.0   \n",
       "\n",
       "       strategy_id  copy_trading  status isActive isPaperTrading isNoBalance  \\\n",
       "9120         149.0          True     0.0    False          False       False   \n",
       "64939        896.0          True     0.0    False           True       False   \n",
       "64938        896.0          True     0.0    False           True       False   \n",
       "9122         149.0          True     0.0    False          False       False   \n",
       "2583         259.0         False     0.0    False          False       False   \n",
       "...            ...           ...     ...      ...            ...         ...   \n",
       "894          550.0          True  active    False           True       False   \n",
       "4873         149.0          True     0.0    False          False       False   \n",
       "9701         330.0          True     0.0    False           True       False   \n",
       "6733         149.0          True     0.0    False          False       False   \n",
       "5562         149.0          True     0.0    False          False       False   \n",
       "\n",
       "      Traded volume Traded Value  \n",
       "9120           83.0    367867.72  \n",
       "64939        4793.0    308848.96  \n",
       "64938        4793.0    308848.96  \n",
       "9122           83.0    367867.72  \n",
       "2583           60.0     40458.73  \n",
       "...             ...          ...  \n",
       "894             2.0    135278.80  \n",
       "4873         1173.0    109958.96  \n",
       "9701           83.0     58514.69  \n",
       "6733         1159.0    141782.37  \n",
       "5562          229.0     72801.68  \n",
       "\n",
       "[32179 rows x 22 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df_pnl['user_id'].nunique()\n",
    "filtered_df_pnl = filtered_df_pnl.fillna(0.0)\n",
    "filtered_df_pnl.sort_values(by='pnl', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "0157f24e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>subscription_id</th>\n",
       "      <th>pnl</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>is_fee_paid</th>\n",
       "      <th>created_datetime</th>\n",
       "      <th>start_datetime</th>\n",
       "      <th>end_datetime</th>\n",
       "      <th>...</th>\n",
       "      <th>allocation</th>\n",
       "      <th>max_positions</th>\n",
       "      <th>strategy_id</th>\n",
       "      <th>copy_trading</th>\n",
       "      <th>status</th>\n",
       "      <th>isActive</th>\n",
       "      <th>isPaperTrading</th>\n",
       "      <th>isNoBalance</th>\n",
       "      <th>Traded volume</th>\n",
       "      <th>Traded Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>90795</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9661.0</td>\n",
       "      <td>1.75639</td>\n",
       "      <td>2023-03-08 00:00:00+00:00</td>\n",
       "      <td>2023-03-09 00:00:00+00:00</td>\n",
       "      <td>8407</td>\n",
       "      <td>False</td>\n",
       "      <td>2023-02-26 14:57:01.378000+00:00</td>\n",
       "      <td>2023-02-24 11:21:38.457406+00:00</td>\n",
       "      <td>2023-04-26 10:48:02.923974+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>21752.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>837.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>8407.0</td>\n",
       "      <td>2598107.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90824</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9661.0</td>\n",
       "      <td>389.42580</td>\n",
       "      <td>2023-04-10 00:00:00+00:00</td>\n",
       "      <td>2023-04-11 00:00:00+00:00</td>\n",
       "      <td>8407</td>\n",
       "      <td>True</td>\n",
       "      <td>2023-02-26 14:57:01.378000+00:00</td>\n",
       "      <td>2023-02-24 11:21:38.457406+00:00</td>\n",
       "      <td>2023-04-26 10:48:02.923974+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>21752.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>837.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>8407.0</td>\n",
       "      <td>2598107.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90814</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9661.0</td>\n",
       "      <td>53.54410</td>\n",
       "      <td>2023-03-29 00:00:00+00:00</td>\n",
       "      <td>2023-03-30 00:00:00+00:00</td>\n",
       "      <td>8407</td>\n",
       "      <td>False</td>\n",
       "      <td>2023-02-26 14:57:01.378000+00:00</td>\n",
       "      <td>2023-02-24 11:21:38.457406+00:00</td>\n",
       "      <td>2023-04-26 10:48:02.923974+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>21752.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>837.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>8407.0</td>\n",
       "      <td>2598107.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90815</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9661.0</td>\n",
       "      <td>304.22870</td>\n",
       "      <td>2023-04-02 00:00:00+00:00</td>\n",
       "      <td>2023-04-03 00:00:00+00:00</td>\n",
       "      <td>8407</td>\n",
       "      <td>False</td>\n",
       "      <td>2023-02-26 14:57:01.378000+00:00</td>\n",
       "      <td>2023-02-24 11:21:38.457406+00:00</td>\n",
       "      <td>2023-04-26 10:48:02.923974+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>21752.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>837.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>8407.0</td>\n",
       "      <td>2598107.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90816</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9661.0</td>\n",
       "      <td>643.88065</td>\n",
       "      <td>2023-04-04 00:00:00+00:00</td>\n",
       "      <td>2023-04-05 00:00:00+00:00</td>\n",
       "      <td>8407</td>\n",
       "      <td>False</td>\n",
       "      <td>2023-02-26 14:57:01.378000+00:00</td>\n",
       "      <td>2023-02-24 11:21:38.457406+00:00</td>\n",
       "      <td>2023-04-26 10:48:02.923974+00:00</td>\n",
       "      <td>...</td>\n",
       "      <td>21752.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>837.0</td>\n",
       "      <td>True</td>\n",
       "      <td>active</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>8407.0</td>\n",
       "      <td>2598107.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103876</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12409</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103875</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12408</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103874</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12407</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103873</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12406</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109874</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>38782 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0  subscription_id        pnl                 start_date  \\\n",
       "90795          0.0           9661.0    1.75639  2023-03-08 00:00:00+00:00   \n",
       "90824          0.0           9661.0  389.42580  2023-04-10 00:00:00+00:00   \n",
       "90814          0.0           9661.0   53.54410  2023-03-29 00:00:00+00:00   \n",
       "90815          0.0           9661.0  304.22870  2023-04-02 00:00:00+00:00   \n",
       "90816          0.0           9661.0  643.88065  2023-04-04 00:00:00+00:00   \n",
       "...            ...              ...        ...                        ...   \n",
       "103876         0.0              0.0    0.00000                        0.0   \n",
       "103875         0.0              0.0    0.00000                        0.0   \n",
       "103874         0.0              0.0    0.00000                        0.0   \n",
       "103873         0.0              0.0    0.00000                        0.0   \n",
       "109874         0.0              0.0    0.00000                        0.0   \n",
       "\n",
       "                         end_date user_id is_fee_paid  \\\n",
       "90795   2023-03-09 00:00:00+00:00    8407       False   \n",
       "90824   2023-04-11 00:00:00+00:00    8407        True   \n",
       "90814   2023-03-30 00:00:00+00:00    8407       False   \n",
       "90815   2023-04-03 00:00:00+00:00    8407       False   \n",
       "90816   2023-04-05 00:00:00+00:00    8407       False   \n",
       "...                           ...     ...         ...   \n",
       "103876                        0.0   12409         0.0   \n",
       "103875                        0.0   12408         0.0   \n",
       "103874                        0.0   12407         0.0   \n",
       "103873                        0.0   12406         0.0   \n",
       "109874                        0.0    9999         0.0   \n",
       "\n",
       "                        created_datetime                    start_datetime  \\\n",
       "90795   2023-02-26 14:57:01.378000+00:00  2023-02-24 11:21:38.457406+00:00   \n",
       "90824   2023-02-26 14:57:01.378000+00:00  2023-02-24 11:21:38.457406+00:00   \n",
       "90814   2023-02-26 14:57:01.378000+00:00  2023-02-24 11:21:38.457406+00:00   \n",
       "90815   2023-02-26 14:57:01.378000+00:00  2023-02-24 11:21:38.457406+00:00   \n",
       "90816   2023-02-26 14:57:01.378000+00:00  2023-02-24 11:21:38.457406+00:00   \n",
       "...                                  ...                               ...   \n",
       "103876                               0.0                               0.0   \n",
       "103875                               0.0                               0.0   \n",
       "103874                               0.0                               0.0   \n",
       "103873                               0.0                               0.0   \n",
       "109874                               0.0                               0.0   \n",
       "\n",
       "                            end_datetime  ... allocation max_positions  \\\n",
       "90795   2023-04-26 10:48:02.923974+00:00  ...    21752.5           5.0   \n",
       "90824   2023-04-26 10:48:02.923974+00:00  ...    21752.5           5.0   \n",
       "90814   2023-04-26 10:48:02.923974+00:00  ...    21752.5           5.0   \n",
       "90815   2023-04-26 10:48:02.923974+00:00  ...    21752.5           5.0   \n",
       "90816   2023-04-26 10:48:02.923974+00:00  ...    21752.5           5.0   \n",
       "...                                  ...  ...        ...           ...   \n",
       "103876                               0.0  ...        0.0           0.0   \n",
       "103875                               0.0  ...        0.0           0.0   \n",
       "103874                               0.0  ...        0.0           0.0   \n",
       "103873                               0.0  ...        0.0           0.0   \n",
       "109874                               0.0  ...        0.0           0.0   \n",
       "\n",
       "        strategy_id  copy_trading  status isActive isPaperTrading isNoBalance  \\\n",
       "90795         837.0          True  active    False          False       False   \n",
       "90824         837.0          True  active    False          False       False   \n",
       "90814         837.0          True  active    False          False       False   \n",
       "90815         837.0          True  active    False          False       False   \n",
       "90816         837.0          True  active    False          False       False   \n",
       "...             ...           ...     ...      ...            ...         ...   \n",
       "103876          0.0           0.0     0.0      0.0            0.0         0.0   \n",
       "103875          0.0           0.0     0.0      0.0            0.0         0.0   \n",
       "103874          0.0           0.0     0.0      0.0            0.0         0.0   \n",
       "103873          0.0           0.0     0.0      0.0            0.0         0.0   \n",
       "109874          0.0           0.0     0.0      0.0            0.0         0.0   \n",
       "\n",
       "       Traded volume Traded Value  \n",
       "90795         8407.0   2598107.23  \n",
       "90824         8407.0   2598107.23  \n",
       "90814         8407.0   2598107.23  \n",
       "90815         8407.0   2598107.23  \n",
       "90816         8407.0   2598107.23  \n",
       "...              ...          ...  \n",
       "103876           0.0         0.00  \n",
       "103875           0.0         0.00  \n",
       "103874           0.0         0.00  \n",
       "103873           0.0         0.00  \n",
       "109874           0.0         0.00  \n",
       "\n",
       "[38782 rows x 22 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df_dca['user_id'].nunique()\n",
    "filtered_df_dca = filtered_df_dca.fillna(0.0)\n",
    "filtered_df_dca.sort_values(by='Traded Value', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b9b29710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>real_trading_pnl</th>\n",
       "      <th>paper_trading_pnl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5918</th>\n",
       "      <td>60</td>\n",
       "      <td>10586.294725</td>\n",
       "      <td>1188.630975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7683</th>\n",
       "      <td>83</td>\n",
       "      <td>6151.247290</td>\n",
       "      <td>-1218.460370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3456</th>\n",
       "      <td>1933</td>\n",
       "      <td>1933.034869</td>\n",
       "      <td>5438.748500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7925</th>\n",
       "      <td>859</td>\n",
       "      <td>1537.857302</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8742</th>\n",
       "      <td>95</td>\n",
       "      <td>1461.484678</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3504</th>\n",
       "      <td>2824</td>\n",
       "      <td>-516.352985</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1570</th>\n",
       "      <td>1164</td>\n",
       "      <td>-1095.669511</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1656</th>\n",
       "      <td>1173</td>\n",
       "      <td>-1522.079308</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>1159</td>\n",
       "      <td>-2338.078325</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3466</th>\n",
       "      <td>229</td>\n",
       "      <td>-2730.805850</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9218 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  real_trading_pnl  paper_trading_pnl\n",
       "5918      60      10586.294725        1188.630975\n",
       "7683      83       6151.247290       -1218.460370\n",
       "3456    1933       1933.034869        5438.748500\n",
       "7925     859       1537.857302           0.000000\n",
       "8742      95       1461.484678           0.000000\n",
       "...      ...               ...                ...\n",
       "3504    2824       -516.352985           0.000000\n",
       "1570    1164      -1095.669511           0.000000\n",
       "1656    1173      -1522.079308           0.000000\n",
       "1522    1159      -2338.078325           0.000000\n",
       "3466     229      -2730.805850           0.000000\n",
       "\n",
       "[9218 rows x 3 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Categorize the pnl column as profits and loss from real trading or paper trading\n",
    "filtered_df_pnl['real_trading_pnl'] = filtered_df_pnl.loc[filtered_df_pnl['exchange'] != 'binance_paper_trading', 'pnl']\n",
    "filtered_df_pnl['paper_trading_pnl'] = filtered_df_pnl.loc[filtered_df_pnl['exchange'] == 'binance_paper_trading', 'pnl']\n",
    "pnl_grouped_df = filtered_df_pnl.groupby('user_id').agg(real_trading_pnl=('real_trading_pnl', 'sum'), paper_trading_pnl=('paper_trading_pnl', 'sum')).reset_index()\n",
    "pnl_grouped_df.sort_values(by='real_trading_pnl', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "f8da4077",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>real_trading_volume</th>\n",
       "      <th>copy_trading_volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5508</th>\n",
       "      <td>60</td>\n",
       "      <td>2.601993e+08</td>\n",
       "      <td>2.619684e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7198</th>\n",
       "      <td>8407</td>\n",
       "      <td>1.325182e+08</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1504</th>\n",
       "      <td>1164</td>\n",
       "      <td>6.538547e+07</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7114</th>\n",
       "      <td>83</td>\n",
       "      <td>6.462604e+07</td>\n",
       "      <td>7.876709e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1585</th>\n",
       "      <td>1173</td>\n",
       "      <td>3.525208e+07</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2869</th>\n",
       "      <td>13223</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2868</th>\n",
       "      <td>13222</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2867</th>\n",
       "      <td>13221</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2866</th>\n",
       "      <td>13220</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  real_trading_volume  copy_trading_volume\n",
       "5508      60         2.601993e+08         2.619684e+08\n",
       "7198    8407         1.325182e+08         0.000000e+00\n",
       "1504    1164         6.538547e+07         0.000000e+00\n",
       "7114      83         6.462604e+07         7.876709e+05\n",
       "1585    1173         3.525208e+07         0.000000e+00\n",
       "...      ...                  ...                  ...\n",
       "2869   13223         0.000000e+00         0.000000e+00\n",
       "2868   13222         0.000000e+00         0.000000e+00\n",
       "2867   13221         0.000000e+00         0.000000e+00\n",
       "2866   13220         0.000000e+00         0.000000e+00\n",
       "8582    9999         0.000000e+00         0.000000e+00\n",
       "\n",
       "[8583 rows x 3 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Categorize the traded value column as traded volume from real trading or paper trading\n",
    "filtered_df_dca['real_trading_volume'] = filtered_df_dca.loc[filtered_df_dca['exchange'] != 'binance_paper_trading', 'Traded Value']\n",
    "filtered_df_dca['copy_trading_volume'] = filtered_df_dca.loc[filtered_df_dca['exchange'] == 'binance_paper_trading', 'Traded Value']\n",
    "\n",
    "# Fill missing values with 0\n",
    "filtered_df_dca['real_trading_volume'].fillna(0, inplace=True)\n",
    "filtered_df_dca['copy_trading_volume'].fillna(0, inplace=True)\n",
    "\n",
    "volume_grouped_df = filtered_df_dca.groupby('user_id').agg(real_trading_volume=('real_trading_volume', 'sum'), copy_trading_volume=('copy_trading_volume', 'sum')).reset_index()\n",
    "volume_grouped_df.sort_values(by='real_trading_volume', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "cc7f77b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>allocation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5583</th>\n",
       "      <td>611</td>\n",
       "      <td>2.156642e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3259</th>\n",
       "      <td>2498</td>\n",
       "      <td>1.203280e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3288</th>\n",
       "      <td>3106</td>\n",
       "      <td>8.103440e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3255</th>\n",
       "      <td>1933</td>\n",
       "      <td>7.420603e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1775</th>\n",
       "      <td>11950</td>\n",
       "      <td>7.109120e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2869</th>\n",
       "      <td>13223</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2868</th>\n",
       "      <td>13222</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2867</th>\n",
       "      <td>13221</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2866</th>\n",
       "      <td>13220</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id    allocation\n",
       "5583     611  2.156642e+07\n",
       "3259    2498  1.203280e+07\n",
       "3288    3106  8.103440e+06\n",
       "3255    1933  7.420603e+06\n",
       "1775   11950  7.109120e+06\n",
       "...      ...           ...\n",
       "2869   13223  0.000000e+00\n",
       "2868   13222  0.000000e+00\n",
       "2867   13221  0.000000e+00\n",
       "2866   13220  0.000000e+00\n",
       "8582    9999  0.000000e+00\n",
       "\n",
       "[8583 rows x 2 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group the amount of allocation by user_id\n",
    "allocation_df = filtered_df_dca.groupby('user_id')['allocation'].sum().reset_index()\n",
    "allocation_df.sort_values(by='allocation', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a58f5ce3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>max_positions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3288</th>\n",
       "      <td>3106</td>\n",
       "      <td>357367.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3255</th>\n",
       "      <td>1933</td>\n",
       "      <td>112282.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3880</th>\n",
       "      <td>3987</td>\n",
       "      <td>11704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3297</th>\n",
       "      <td>3232</td>\n",
       "      <td>10715.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5508</th>\n",
       "      <td>60</td>\n",
       "      <td>10035.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2869</th>\n",
       "      <td>13223</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2868</th>\n",
       "      <td>13222</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2867</th>\n",
       "      <td>13221</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2866</th>\n",
       "      <td>13220</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  max_positions\n",
       "3288    3106       357367.0\n",
       "3255    1933       112282.0\n",
       "3880    3987        11704.0\n",
       "3297    3232        10715.0\n",
       "5508      60        10035.0\n",
       "...      ...            ...\n",
       "2869   13223            0.0\n",
       "2868   13222            0.0\n",
       "2867   13221            0.0\n",
       "2866   13220            0.0\n",
       "8582    9999            0.0\n",
       "\n",
       "[8583 rows x 2 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group the max_positions by user_id\n",
    "max_position_df = filtered_df_dca.groupby('user_id')['max_positions'].sum().reset_index()\n",
    "max_position_df.sort_values(by='max_positions', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4e728a1e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>IsPaperTrading_binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6431</th>\n",
       "      <td>7310</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7874</th>\n",
       "      <td>9222</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5765</th>\n",
       "      <td>6381</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6850</th>\n",
       "      <td>7947</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4510</th>\n",
       "      <td>4793</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2851</th>\n",
       "      <td>13205</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2850</th>\n",
       "      <td>13204</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2849</th>\n",
       "      <td>13203</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2848</th>\n",
       "      <td>13199</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  IsPaperTrading_binary\n",
       "6431    7310                      1\n",
       "7874    9222                      1\n",
       "5765    6381                      1\n",
       "6850    7947                      1\n",
       "4510    4793                      1\n",
       "...      ...                    ...\n",
       "2851   13205                      0\n",
       "2850   13204                      0\n",
       "2849   13203                      0\n",
       "2848   13199                      0\n",
       "8582    9999                      0\n",
       "\n",
       "[8583 rows x 2 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transform boolean variables into binary variables for IsActive and IsPaperTrading\n",
    "binary_grouped_df = filtered_df_dca.groupby('user_id').agg(\n",
    "    IsPaperTrading_binary=('isPaperTrading', lambda x: np.any(x))\n",
    ").reset_index()\n",
    "\n",
    "binary_grouped_df['IsPaperTrading_binary'] = binary_grouped_df['IsPaperTrading_binary'].astype(int)\n",
    "binary_grouped_df.sort_values(by='IsPaperTrading_binary', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "c70a6e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>market</th>\n",
       "      <th>user_id</th>\n",
       "      <th>0.0</th>\n",
       "      <th>futures</th>\n",
       "      <th>spot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10001</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10003</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8578</th>\n",
       "      <td>9995</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8579</th>\n",
       "      <td>9996</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8580</th>\n",
       "      <td>9997</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8581</th>\n",
       "      <td>9998</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "market user_id  0.0  futures  spot\n",
       "0        10000  1.0      0.0   0.0\n",
       "1        10001  1.0      0.0   0.0\n",
       "2        10002  1.0      0.0   0.0\n",
       "3        10003  1.0      0.0   0.0\n",
       "4        10004  1.0      0.0   0.0\n",
       "...        ...  ...      ...   ...\n",
       "8578      9995  1.0      0.0   0.0\n",
       "8579      9996  1.0      0.0   0.0\n",
       "8580      9997  1.0      0.0   0.0\n",
       "8581      9998  1.0      0.0   0.0\n",
       "8582      9999  1.0      0.0   0.0\n",
       "\n",
       "[8583 rows x 4 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count the frequencies of 'SPOT' and 'FUTURES' for each user\n",
    "market_df_1 = filtered_df_dca.groupby('user_id')['market'].value_counts().unstack().reset_index()\n",
    "market_df_1.rename(columns={'SPOT': 'spot', 'FUTURES': 'futures'}, inplace=True)\n",
    "market_df_1.fillna(0, inplace=True)\n",
    "market_df_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "68e89296",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>exchange</th>\n",
       "      <th>user_id</th>\n",
       "      <th>0.0</th>\n",
       "      <th>binance</th>\n",
       "      <th>binance_paper_trading</th>\n",
       "      <th>binance_us</th>\n",
       "      <th>bitget</th>\n",
       "      <th>bybit</th>\n",
       "      <th>coinbasepro</th>\n",
       "      <th>cryptocom</th>\n",
       "      <th>ftx</th>\n",
       "      <th>huobi</th>\n",
       "      <th>kucoin</th>\n",
       "      <th>kucoin_futures</th>\n",
       "      <th>mexc</th>\n",
       "      <th>okx</th>\n",
       "      <th>woo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5508</th>\n",
       "      <td>60</td>\n",
       "      <td>0.0</td>\n",
       "      <td>644.0</td>\n",
       "      <td>243.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1504</th>\n",
       "      <td>1164</td>\n",
       "      <td>0.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7114</th>\n",
       "      <td>83</td>\n",
       "      <td>0.0</td>\n",
       "      <td>517.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7345</th>\n",
       "      <td>859</td>\n",
       "      <td>0.0</td>\n",
       "      <td>475.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3278</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>370.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2867</th>\n",
       "      <td>13221</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2866</th>\n",
       "      <td>13220</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2865</th>\n",
       "      <td>13219</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2864</th>\n",
       "      <td>13218</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8582</th>\n",
       "      <td>9999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8583 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "exchange user_id  0.0  binance  binance_paper_trading  binance_us  bitget  \\\n",
       "5508          60  0.0    644.0                  243.0         0.0     0.0   \n",
       "1504        1164  0.0    626.0                    0.0         0.0     0.0   \n",
       "7114          83  0.0    517.0                   85.0         0.0     0.0   \n",
       "7345         859  0.0    475.0                    0.0         0.0     0.0   \n",
       "3278           3  0.0    370.0                  159.0         0.0     0.0   \n",
       "...          ...  ...      ...                    ...         ...     ...   \n",
       "2867       13221  1.0      0.0                    0.0         0.0     0.0   \n",
       "2866       13220  1.0      0.0                    0.0         0.0     0.0   \n",
       "2865       13219  1.0      0.0                    0.0         0.0     0.0   \n",
       "2864       13218  1.0      0.0                    0.0         0.0     0.0   \n",
       "8582        9999  1.0      0.0                    0.0         0.0     0.0   \n",
       "\n",
       "exchange  bybit  coinbasepro  cryptocom    ftx  huobi  kucoin  kucoin_futures  \\\n",
       "5508       58.0          0.0        0.0  101.0    0.0     0.0             0.0   \n",
       "1504        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "7114        0.0          0.0        0.0    0.0    0.0    78.0             0.0   \n",
       "7345        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "3278        0.0          0.0        0.0    0.0    0.0    32.0             0.0   \n",
       "...         ...          ...        ...    ...    ...     ...             ...   \n",
       "2867        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "2866        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "2865        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "2864        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "8582        0.0          0.0        0.0    0.0    0.0     0.0             0.0   \n",
       "\n",
       "exchange  mexc  okx  woo  \n",
       "5508       0.0  0.0  0.0  \n",
       "1504       0.0  0.0  0.0  \n",
       "7114       0.0  0.0  0.0  \n",
       "7345       0.0  0.0  0.0  \n",
       "3278       0.0  0.0  0.0  \n",
       "...        ...  ...  ...  \n",
       "2867       0.0  0.0  0.0  \n",
       "2866       0.0  0.0  0.0  \n",
       "2865       0.0  0.0  0.0  \n",
       "2864       0.0  0.0  0.0  \n",
       "8582       0.0  0.0  0.0  \n",
       "\n",
       "[8583 rows x 16 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count the occurrences of each variable in the \"exchange\" column by user\n",
    "exchange_df = filtered_df_dca.groupby('user_id')['exchange'].value_counts().unstack().reset_index()\n",
    "exchange_df.fillna(0, inplace=True)\n",
    "exchange_df.sort_values(by='binance', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0ba43ca2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>created_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2022-09-08 07:19:27.882000+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10001</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10002</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10003</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10168</th>\n",
       "      <td>9995</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10169</th>\n",
       "      <td>9996</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10170</th>\n",
       "      <td>9997</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10171</th>\n",
       "      <td>9998</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10172</th>\n",
       "      <td>9999</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10173 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id                 created_datetime\n",
       "0           1 2022-09-08 07:19:27.882000+00:00\n",
       "1       10000                              NaT\n",
       "2       10001                              NaT\n",
       "3       10002                              NaT\n",
       "4       10003                              NaT\n",
       "...       ...                              ...\n",
       "10168    9995                              NaT\n",
       "10169    9996                              NaT\n",
       "10170    9997                              NaT\n",
       "10171    9998                              NaT\n",
       "10172    9999                              NaT\n",
       "\n",
       "[10173 rows x 2 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "51e03613",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 10361 entries, 1 to 3189\n",
      "Data columns (total 24 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   real_trading_pnl       10361 non-null  float64\n",
      " 1   paper_trading_pnl      10361 non-null  float64\n",
      " 2   real_trading_volume    10361 non-null  float64\n",
      " 3   copy_trading_volume    10361 non-null  float64\n",
      " 4   allocation             10361 non-null  float64\n",
      " 5   max_positions          10361 non-null  float64\n",
      " 6   IsPaperTrading_binary  10361 non-null  float64\n",
      " 7   futures                10361 non-null  float64\n",
      " 8   spot                   10361 non-null  float64\n",
      " 9   binance                10361 non-null  float64\n",
      " 10  binance_paper_trading  10361 non-null  float64\n",
      " 11  binance_us             10361 non-null  float64\n",
      " 12  bitget                 10361 non-null  float64\n",
      " 13  bybit                  10361 non-null  float64\n",
      " 14  coinbasepro            10361 non-null  float64\n",
      " 15  cryptocom              10361 non-null  float64\n",
      " 16  ftx                    10361 non-null  float64\n",
      " 17  huobi                  10361 non-null  float64\n",
      " 18  kucoin                 10361 non-null  float64\n",
      " 19  kucoin_futures         10361 non-null  float64\n",
      " 20  mexc                   10361 non-null  float64\n",
      " 21  okx                    10361 non-null  float64\n",
      " 22  woo                    10361 non-null  float64\n",
      " 23  converted              10361 non-null  float64\n",
      "dtypes: float64(24)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# Merge the DataFrames on the 'user_id' column\n",
    "combined_df = pnl_grouped_df.merge(volume_grouped_df, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(allocation_df, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(max_position_df, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(binary_grouped_df, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(market_df_1, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(exchange_df, on='user_id', how='outer')\n",
    "combined_df = combined_df.merge(df_churn_status, on='user_id', how='outer')\n",
    "combined_df.set_index('user_id', inplace=True)\n",
    "combined_df = combined_df.fillna(0)\n",
    "combined_df = combined_df.drop([\"0.0_x\", \"0.0_y\"], axis=1)\n",
    "combined_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8da4aa02",
   "metadata": {},
   "source": [
    "## **3.3 Variable correlation**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2cd5c4c",
   "metadata": {},
   "source": [
    "### **3.3.1 Correlation between market performance and conversion**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "cc6ecb36",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Dropping of nuisance columns in rolling operations is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the operation. Dropped columns were Index(['timestamp'], dtype='object')\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>altcoinMarketCap</th>\n",
       "      <th>MA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-04-30T00</td>\n",
       "      <td>9.471630e+07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-05-02T00</td>\n",
       "      <td>7.899870e+07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-05-04T00</td>\n",
       "      <td>7.158680e+07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-05-06T00</td>\n",
       "      <td>8.118720e+07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-08T00</td>\n",
       "      <td>7.434920e+07</td>\n",
       "      <td>8.016764e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1832</th>\n",
       "      <td>2023-05-14T00</td>\n",
       "      <td>6.016422e+11</td>\n",
       "      <td>6.143650e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1833</th>\n",
       "      <td>2023-05-16T00</td>\n",
       "      <td>6.078853e+11</td>\n",
       "      <td>6.063514e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1834</th>\n",
       "      <td>2023-05-18T00</td>\n",
       "      <td>6.086202e+11</td>\n",
       "      <td>6.036932e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1835</th>\n",
       "      <td>2023-05-20T00</td>\n",
       "      <td>6.046795e+11</td>\n",
       "      <td>6.034006e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1836</th>\n",
       "      <td>2023-05-22T00</td>\n",
       "      <td>5.998039e+11</td>\n",
       "      <td>6.045262e+11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1837 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          timestamp  altcoinMarketCap            MA\n",
       "0     2013-04-30T00      9.471630e+07           NaN\n",
       "1     2013-05-02T00      7.899870e+07           NaN\n",
       "2     2013-05-04T00      7.158680e+07           NaN\n",
       "3     2013-05-06T00      8.118720e+07           NaN\n",
       "4     2013-05-08T00      7.434920e+07  8.016764e+07\n",
       "...             ...               ...           ...\n",
       "1832  2023-05-14T00      6.016422e+11  6.143650e+11\n",
       "1833  2023-05-16T00      6.078853e+11  6.063514e+11\n",
       "1834  2023-05-18T00      6.086202e+11  6.036932e+11\n",
       "1835  2023-05-20T00      6.046795e+11  6.034006e+11\n",
       "1836  2023-05-22T00      5.998039e+11  6.045262e+11\n",
       "\n",
       "[1837 rows x 3 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set the moving average to 10 days\n",
    "df_ma = df_totalmarketcap[['timestamp','altcoinMarketCap']]\n",
    "df_ma['MA'] = df_ma.rolling(window=5).mean()\n",
    "df_ma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "788ab57b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          timestamp  altcoinMarketCap            MA       MA_diff  \\\n",
      "1705  2022-09-02T00      6.006043e+11  5.934275e+11 -5.874116e+10   \n",
      "1706  2022-09-04T00      5.966325e+11  5.884689e+11 -4.855397e+10   \n",
      "1707  2022-09-06T00      6.078039e+11  5.928236e+11 -2.449135e+10   \n",
      "1708  2022-09-08T00      6.051239e+11  5.998589e+11  6.629906e+08   \n",
      "1709  2022-09-10T00      6.372492e+11  6.094827e+11  1.307644e+10   \n",
      "...             ...               ...           ...           ...   \n",
      "1832  2023-05-14T00      6.016422e+11  6.143650e+11 -1.985423e+10   \n",
      "1833  2023-05-16T00      6.078853e+11  6.063514e+11 -3.046461e+10   \n",
      "1834  2023-05-18T00      6.086202e+11  6.036932e+11 -2.947464e+10   \n",
      "1835  2023-05-20T00      6.046795e+11  6.034006e+11 -2.291335e+10   \n",
      "1836  2023-05-22T00      5.998039e+11  6.045262e+11 -1.631280e+10   \n",
      "\n",
      "     Market_direction  \n",
      "1705                0  \n",
      "1706                0  \n",
      "1707                0  \n",
      "1708                1  \n",
      "1709                1  \n",
      "...               ...  \n",
      "1832                0  \n",
      "1833                0  \n",
      "1834                0  \n",
      "1835                0  \n",
      "1836                0  \n",
      "\n",
      "[132 rows x 5 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# Calculate the difference between the current day's MA and the MA 10 days ago\n",
    "df_ma['MA_diff'] = df_ma['MA'] - df_ma['MA'].shift(5)\n",
    "\n",
    "# Create a new column 'Market_direction' indicating whether the market went up or down compared to the last 10 days of moving average\n",
    "df_ma['Market_direction'] = df_ma['MA_diff'].apply(lambda x: '1' if x > 0 else '0')\n",
    "df_ma_filtered = df_ma[df_ma['timestamp'] >= '2022-09-01']\n",
    "# Print the updated DataFrame\n",
    "print(df_ma_filtered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "5c80b5e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between Market Direction and User Conversion: -0.0078\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# Convert the 'timestamp' column in df_ma to datetime \n",
    "df_ma['timestamp'] = pd.to_datetime(df_ma['timestamp']).dt.date\n",
    "\n",
    "# Convert the 'date_registration' column in df_label to datetime \n",
    "df_label['created_datetime'] = pd.to_datetime(df_label['created_datetime']).dt.date\n",
    "\n",
    "# Merge the DataFrames based on the common column\n",
    "merged_df = pd.merge(df_ma, df_label, left_on='timestamp', right_on='created_datetime', how='inner')\n",
    "\n",
    "# Calculate the correlation between market direction and user conversion\n",
    "correlation = merged_df['Market_direction'].astype(float).corr(merged_df['converted']).round(4)\n",
    "\n",
    "# Print the correlation value\n",
    "print(\"Correlation between Market Direction and User Conversion:\", correlation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e1315b7",
   "metadata": {},
   "source": [
    "The correlation between market direction and user conversion is not significant, therefore, the market direction data will not be included as one of the features. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a77cdafa",
   "metadata": {},
   "source": [
    "### **3.3.2 Correlation between variables of user behavior and conversion**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d16557df",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvalues:\n",
      "[ 5.05216249e+00  3.30620752e+00  2.18272754e+00  1.46856986e+00\n",
      "  2.75481428e-02  6.92787598e-02  1.55169355e-01  1.97034501e-01\n",
      "  2.43462712e-01  2.28542280e-01  3.92805327e-01  5.13592418e-01\n",
      "  6.09302054e-01  7.01290241e-01  1.12044885e+00  1.10200334e+00\n",
      "  8.20764332e-01  9.09412498e-01  9.23447845e-01  9.52179217e-01\n",
      "  1.02207341e+00  1.00027972e+00  1.00169758e+00 -1.92792711e-15]\n"
     ]
    }
   ],
   "source": [
    "# Plot heatmap of numeric variables\n",
    "plt.figure(figsize=(12, 8))\n",
    "corr = combined_df.corr()\n",
    "sns.heatmap(corr, cmap=\"Blues\")\n",
    "plt.title(\"Correlations Heatmap\", fontsize=16)\n",
    "plt.show()\n",
    "\n",
    "# Compute eigenvalues\n",
    "eigenvalues, _ = np.linalg.eig(corr)\n",
    "\n",
    "# Print the eigenvalues\n",
    "print(\"Eigenvalues:\")\n",
    "print(eigenvalues)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39817229",
   "metadata": {},
   "source": [
    "# **4. Methodology**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29638cc6",
   "metadata": {},
   "source": [
    "## **4.1 Data Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "88013cce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>real_trading_pnl</th>\n",
       "      <th>paper_trading_pnl</th>\n",
       "      <th>real_trading_volume</th>\n",
       "      <th>copy_trading_volume</th>\n",
       "      <th>allocation</th>\n",
       "      <th>max_positions</th>\n",
       "      <th>IsPaperTrading_binary</th>\n",
       "      <th>futures</th>\n",
       "      <th>spot</th>\n",
       "      <th>binance</th>\n",
       "      <th>...</th>\n",
       "      <th>coinbasepro</th>\n",
       "      <th>cryptocom</th>\n",
       "      <th>ftx</th>\n",
       "      <th>huobi</th>\n",
       "      <th>kucoin</th>\n",
       "      <th>kucoin_futures</th>\n",
       "      <th>mexc</th>\n",
       "      <th>okx</th>\n",
       "      <th>woo</th>\n",
       "      <th>converted</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10000</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10001</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12864</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12522</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12543</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5381</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3189</th>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.030726</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.033619</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.011914</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.026624</td>\n",
       "      <td>-0.016658</td>\n",
       "      <td>-0.045863</td>\n",
       "      <td>-0.19432</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10361 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         real_trading_pnl  paper_trading_pnl  real_trading_volume  \\\n",
       "user_id                                                             \n",
       "1               -0.026245          -0.025794            -0.030726   \n",
       "10000           -0.026245          -0.025794            -0.030726   \n",
       "10001           -0.026245          -0.025794            -0.030726   \n",
       "10002           -0.026245          -0.025794            -0.030726   \n",
       "10003           -0.026245          -0.025794            -0.030726   \n",
       "...                   ...                ...                  ...   \n",
       "12864           -0.026245          -0.025794            -0.030726   \n",
       "12522           -0.026245          -0.025794            -0.030726   \n",
       "12543           -0.026245          -0.025794            -0.030726   \n",
       "5381            -0.026245          -0.025794            -0.030726   \n",
       "3189            -0.026245          -0.025794            -0.030726   \n",
       "\n",
       "         copy_trading_volume  allocation  max_positions  \\\n",
       "user_id                                                   \n",
       "1                  -0.026476   -0.045098      -0.018236   \n",
       "10000              -0.026476   -0.045098      -0.018236   \n",
       "10001              -0.026476   -0.045098      -0.018236   \n",
       "10002              -0.026476   -0.045098      -0.018236   \n",
       "10003              -0.026476   -0.045098      -0.018236   \n",
       "...                      ...         ...            ...   \n",
       "12864              -0.026476   -0.045098      -0.018236   \n",
       "12522              -0.026476   -0.045098      -0.018236   \n",
       "12543              -0.026476   -0.045098      -0.018236   \n",
       "5381               -0.026476   -0.045098      -0.018236   \n",
       "3189               -0.026476   -0.045098      -0.018236   \n",
       "\n",
       "         IsPaperTrading_binary   futures      spot   binance  ...  \\\n",
       "user_id                                                       ...   \n",
       "1                    -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "10000                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "10001                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "10002                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "10003                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "...                        ...       ...       ...       ...  ...   \n",
       "12864                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "12522                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "12543                -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "5381                 -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "3189                 -0.125636 -0.033619 -0.070638 -0.072429  ...   \n",
       "\n",
       "         coinbasepro  cryptocom      ftx     huobi    kucoin  kucoin_futures  \\\n",
       "user_id                                                                        \n",
       "1          -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "10000      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "10001      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "10002      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "10003      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "...              ...        ...      ...       ...       ...             ...   \n",
       "12864      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "12522      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "12543      -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "5381       -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "3189       -0.021399  -0.014754 -0.02801 -0.011914 -0.043851       -0.022082   \n",
       "\n",
       "             mexc       okx       woo  converted  \n",
       "user_id                                           \n",
       "1       -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "10000   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "10001   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "10002   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "10003   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "...           ...       ...       ...        ...  \n",
       "12864   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "12522   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "12543   -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "5381    -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "3189    -0.026624 -0.016658 -0.045863   -0.19432  \n",
       "\n",
       "[10361 rows x 24 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale the dataset\n",
    "scaler = StandardScaler()\n",
    "scaled_values = scaler.fit_transform(combined_df.values)\n",
    "scaled_df = pd.DataFrame(scaled_values, columns=combined_df.columns, index=combined_df.index)\n",
    "scaled_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ef59d85d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = scaled_df.drop('converted', axis=1)  # Features\n",
    "y = combined_df['converted']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "82ccecf8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>allocation</th>\n",
       "      <th>max_positions</th>\n",
       "      <th>ftx</th>\n",
       "      <th>binance</th>\n",
       "      <th>binance_paper_trading</th>\n",
       "      <th>real_trading_pnl</th>\n",
       "      <th>spot</th>\n",
       "      <th>copy_trading_volume</th>\n",
       "      <th>paper_trading_pnl</th>\n",
       "      <th>IsPaperTrading_binary</th>\n",
       "      <th>kucoin_futures</th>\n",
       "      <th>coinbasepro</th>\n",
       "      <th>kucoin</th>\n",
       "      <th>binance_us</th>\n",
       "      <th>cryptocom</th>\n",
       "      <th>futures</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10000</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10001</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12864</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12522</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12543</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5381</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3189</th>\n",
       "      <td>-0.045098</td>\n",
       "      <td>-0.018236</td>\n",
       "      <td>-0.02801</td>\n",
       "      <td>-0.072429</td>\n",
       "      <td>-0.032512</td>\n",
       "      <td>-0.026245</td>\n",
       "      <td>-0.070638</td>\n",
       "      <td>-0.026476</td>\n",
       "      <td>-0.025794</td>\n",
       "      <td>-0.125636</td>\n",
       "      <td>-0.022082</td>\n",
       "      <td>-0.021399</td>\n",
       "      <td>-0.043851</td>\n",
       "      <td>-0.031532</td>\n",
       "      <td>-0.014754</td>\n",
       "      <td>-0.033619</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10361 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         allocation  max_positions      ftx   binance  binance_paper_trading  \\\n",
       "user_id                                                                        \n",
       "1         -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "10000     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "10001     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "10002     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "10003     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "...             ...            ...      ...       ...                    ...   \n",
       "12864     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "12522     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "12543     -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "5381      -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "3189      -0.045098      -0.018236 -0.02801 -0.072429              -0.032512   \n",
       "\n",
       "         real_trading_pnl      spot  copy_trading_volume  paper_trading_pnl  \\\n",
       "user_id                                                                       \n",
       "1               -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "10000           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "10001           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "10002           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "10003           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "...                   ...       ...                  ...                ...   \n",
       "12864           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "12522           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "12543           -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "5381            -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "3189            -0.026245 -0.070638            -0.026476          -0.025794   \n",
       "\n",
       "         IsPaperTrading_binary  kucoin_futures  coinbasepro    kucoin  \\\n",
       "user_id                                                                 \n",
       "1                    -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "10000                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "10001                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "10002                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "10003                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "...                        ...             ...          ...       ...   \n",
       "12864                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "12522                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "12543                -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "5381                 -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "3189                 -0.125636       -0.022082    -0.021399 -0.043851   \n",
       "\n",
       "         binance_us  cryptocom   futures  \n",
       "user_id                                   \n",
       "1         -0.031532  -0.014754 -0.033619  \n",
       "10000     -0.031532  -0.014754 -0.033619  \n",
       "10001     -0.031532  -0.014754 -0.033619  \n",
       "10002     -0.031532  -0.014754 -0.033619  \n",
       "10003     -0.031532  -0.014754 -0.033619  \n",
       "...             ...        ...       ...  \n",
       "12864     -0.031532  -0.014754 -0.033619  \n",
       "12522     -0.031532  -0.014754 -0.033619  \n",
       "12543     -0.031532  -0.014754 -0.033619  \n",
       "5381      -0.031532  -0.014754 -0.033619  \n",
       "3189      -0.031532  -0.014754 -0.033619  \n",
       "\n",
       "[10361 rows x 16 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variance_threshold = 0.95\n",
    "\n",
    "# Fit PCA and automatically determine the number of components\n",
    "pca = PCA(n_components=variance_threshold)\n",
    "pca.fit(X)\n",
    "\n",
    "# Get the actual number of components selected\n",
    "num_components = pca.n_components_\n",
    "\n",
    "# Calculate feature importance\n",
    "explained_variance_ratio = pca.explained_variance_ratio_\n",
    "feature_importance = np.abs(pca.components_) * explained_variance_ratio[:, np.newaxis]\n",
    "feature_importance_sum = np.sum(feature_importance, axis=0)\n",
    "\n",
    "# Select top features based on importance\n",
    "top_features_indices = np.argsort(feature_importance_sum)[::-1][:num_components]\n",
    "selected_features = np.take(X, top_features_indices, axis=1)\n",
    "selected_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "93265d16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(selected_features, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "f0205b5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After oversampling:\n",
      "0.0    7993\n",
      "1.0    7993\n",
      "Name: converted, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Apply SMOTE only on the training set\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train, y_train = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "print(\"After oversampling:\")\n",
    "print(pd.Series(y_train).value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a602ef2",
   "metadata": {},
   "source": [
    "## **4.2 Model training before tuning**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a644a1aa",
   "metadata": {},
   "source": [
    "### **4.2.1 Random Forest**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "a8792f1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Random Forest Model to the training data\n",
    "rf_model_1 = RandomForestClassifier()\n",
    "rf_model_1.fit(X_train, y_train)\n",
    "y_pred_rf = rf_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e8b57bc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Score for Random Forest: [0.83677298 0.84391617 0.84923366 0.84141383 0.83859869]\n",
      "Mean CV Score for Random Forest: 0.8419870645615818\n"
     ]
    }
   ],
   "source": [
    "# Cross validation\n",
    "cv_scores_rf = cross_val_score(rf_model_1, X_train, y_train, cv=5, scoring='accuracy')\n",
    "print(\"CV Score for Random Forest:\", cv_scores_rf)\n",
    "print(\"Mean CV Score for Random Forest:\", cv_scores_rf.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b40a01c",
   "metadata": {},
   "source": [
    "### **4.2.2 Decision Tree**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "58c6a54b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Decision Tree Model to the training data\n",
    "dt_model_1 = DecisionTreeClassifier()\n",
    "dt_model_1.fit(X_train, y_train)\n",
    "y_pred_dt = dt_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "a9ea3d52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Score for Decision Tree: [0.83395872 0.84203941 0.84829528 0.83891148 0.83734751]\n",
      "Mean CV Score for Decision Tree: 0.8401104811558209\n"
     ]
    }
   ],
   "source": [
    "# Cross validation\n",
    "cv_scores_dt = cross_val_score(dt_model_1, X_train, y_train, cv=5, scoring='accuracy')\n",
    "print(\"CV Score for Decision Tree:\", cv_scores_dt)\n",
    "print(\"Mean CV Score for Decision Tree:\", cv_scores_dt.mean()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "378630db",
   "metadata": {},
   "source": [
    "### **4.2.4 Gaussian Naive Bayes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1c8cc20d",
   "metadata": {},
   "outputs": [],
   "source": [
    "gnb_model_1 = GaussianNB()\n",
    "gnb_model_1.fit(X_train, y_train)\n",
    "y_pred_gnb = gnb_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ed3ad93d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Score for Gaussian Naive Bayes: [0.48311445 0.48451673 0.46512355 0.46543635 0.48920863]\n",
      "Mean CV Score for Gaussian Naive Bayes: 0.47747994279346084\n"
     ]
    }
   ],
   "source": [
    "# Cross validation\n",
    "cv_scores_gnb = cross_val_score(gnb_model_1, X_train, y_train, cv=5, scoring='accuracy')\n",
    "print(\"CV Score for Gaussian Naive Bayes:\", cv_scores_gnb)\n",
    "print(\"Mean CV Score for Gaussian Naive Bayes:\", cv_scores_gnb.mean()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d44964cd",
   "metadata": {},
   "source": [
    "### **4.2.2 XGBoost**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "0019bd01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the XGBoost Model to the training data\n",
    "xgb_model_1 = xgb.XGBClassifier()\n",
    "xgb_model_1.fit(X_train, y_train)\n",
    "y_pred_xgb = xgb_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "30f6e8e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Score for XGBoost: [0.83708568 0.84297779 0.84892086 0.842665   0.83859869]\n",
      "Mean CV Score for XGBoost: 0.8420496036485112\n"
     ]
    }
   ],
   "source": [
    "# Cross validation\n",
    "cv_scores_xbg = cross_val_score(xgb_model_1, X_train, y_train, cv=5, scoring='accuracy')\n",
    "print(\"CV Score for XGBoost:\", cv_scores_xbg)\n",
    "print(\"Mean CV Score for XGBoost:\", cv_scores_xbg.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97dc4340",
   "metadata": {},
   "source": [
    "### **4.2.3 Logistics Regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "12838fee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Logistics Regression Model to the training data\n",
    "logreg_model_1 = LogisticRegression()\n",
    "logreg_model_1.fit(X_train, y_train)\n",
    "y_pred_logreg = logreg_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "e80c6e79",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Score for Logistics Regression: [0.76985616 0.77666562 0.77948076 0.77197373 0.78385987]\n",
      "Mean CV Score for Logistics Regression: 0.7763672282664936\n"
     ]
    }
   ],
   "source": [
    "# Cross validation\n",
    "cv_scores_logreg = cross_val_score(logreg_model_1, X_train, y_train, cv=5, scoring='accuracy')\n",
    "print(\"CV Score for Logistics Regression:\", cv_scores_logreg)\n",
    "print(\"Mean CV Score for Logistics Regression:\", cv_scores_logreg.mean()) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15ad1f5b",
   "metadata": {},
   "source": [
    "## **4.3 Model performance evaluation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "562cf4fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Balanced Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1</th>\n",
       "      <th>Average Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.978292</td>\n",
       "      <td>0.860078</td>\n",
       "      <td>0.722892</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>0.539558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.973951</td>\n",
       "      <td>0.781814</td>\n",
       "      <td>0.712121</td>\n",
       "      <td>0.573171</td>\n",
       "      <td>0.635135</td>\n",
       "      <td>0.425051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gaussian Naive Bayes</td>\n",
       "      <td>0.041003</td>\n",
       "      <td>0.477368</td>\n",
       "      <td>0.037827</td>\n",
       "      <td>0.951220</td>\n",
       "      <td>0.072761</td>\n",
       "      <td>0.037912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>0.975880</td>\n",
       "      <td>0.823743</td>\n",
       "      <td>0.710526</td>\n",
       "      <td>0.658537</td>\n",
       "      <td>0.683544</td>\n",
       "      <td>0.481415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.966233</td>\n",
       "      <td>0.748564</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.512195</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>0.318076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Model  Accuracy  Balanced Accuracy  Precision    Recall  \\\n",
       "0         Random Forest  0.978292           0.860078   0.722892  0.731707   \n",
       "1         Decision Tree  0.973951           0.781814   0.712121  0.573171   \n",
       "2  Gaussian Naive Bayes  0.041003           0.477368   0.037827  0.951220   \n",
       "3               XGBoost  0.975880           0.823743   0.710526  0.658537   \n",
       "4   Logistic Regression  0.966233           0.748564   0.583333  0.512195   \n",
       "\n",
       "         F1  Average Precision  \n",
       "0  0.727273           0.539558  \n",
       "1  0.635135           0.425051  \n",
       "2  0.072761           0.037912  \n",
       "3  0.683544           0.481415  \n",
       "4  0.545455           0.318076  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_names = ['Random Forest', 'Decision Tree', 'Gaussian Naive Bayes', 'XGBoost', 'Logistic Regression']\n",
    "models = [rf_model_1, dt_model_1, gnb_model_1, xgb_model_1, logreg_model_1]\n",
    "\n",
    "accuracy_scores = []\n",
    "balanced_accuracy_scores = []\n",
    "precision_scores = []\n",
    "recall_scores = []\n",
    "f1_scores = []\n",
    "average_precision_scores = []\n",
    "\n",
    "for model in models:\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    balanced_accuracy = balanced_accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1 = f1_score(y_test, y_pred)\n",
    "    average_precision = average_precision_score(y_test, y_pred)\n",
    "    \n",
    "    accuracy_scores.append(accuracy)\n",
    "    balanced_accuracy_scores.append(balanced_accuracy)\n",
    "    precision_scores.append(precision)\n",
    "    recall_scores.append(recall)\n",
    "    f1_scores.append(f1)\n",
    "    average_precision_scores.append(average_precision)\n",
    "\n",
    "summary_df = pd.DataFrame({\n",
    "    'Model': model_names,\n",
    "    'Accuracy': accuracy_scores,\n",
    "    'Balanced Accuracy': balanced_accuracy_scores,\n",
    "    'Precision': precision_scores,\n",
    "    'Recall': recall_scores,\n",
    "    'F1': f1_scores,\n",
    "    'Average Precision': average_precision_scores\n",
    "})\n",
    "\n",
    "summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5b5dbb19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Mean CV Score</th>\n",
       "      <th>Standard Deviation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.841987</td>\n",
       "      <td>0.004364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.840110</td>\n",
       "      <td>0.004850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gaussian Naive Bayes</td>\n",
       "      <td>0.477480</td>\n",
       "      <td>0.010164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>0.842050</td>\n",
       "      <td>0.004123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Logistics Regression</td>\n",
       "      <td>0.776367</td>\n",
       "      <td>0.005052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Model  Mean CV Score  Standard Deviation\n",
       "0         Random Forest       0.841987            0.004364\n",
       "1         Decision Tree       0.840110            0.004850\n",
       "2  Gaussian Naive Bayes       0.477480            0.010164\n",
       "3               XGBoost       0.842050            0.004123\n",
       "4  Logistics Regression       0.776367            0.005052"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score_list = [cv_scores_rf, cv_scores_dt, cv_scores_gnb,cv_scores_xbg, cv_scores_logreg]\n",
    "mean_cvscore = []\n",
    "sd_cvscore = []\n",
    "for score in score_list:\n",
    "    mean_cvscore.append(np.mean(score))\n",
    "    sd_cvscore.append(np.std(score))\n",
    "    \n",
    "df_cvscore = pd.DataFrame({\"Model\": ['Random Forest', 'Decision Tree', 'Gaussian Naive Bayes','XGBoost', 'Logistics Regression'], \"Mean CV Score\": mean_cvscore, \"Standard Deviation\": sd_cvscore})\n",
    "df_cvscore"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a13a98d9",
   "metadata": {},
   "source": [
    "## **4.4 Hyperparameter tuning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "693fdc14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 200}\n",
      "0.8419870449997781\n"
     ]
    }
   ],
   "source": [
    "# Define the hyperparameter grid for Random Forest\n",
    "param_grid_rf = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [None, 5, 10],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4],\n",
    "    'max_features': ['auto', 'sqrt']\n",
    "}\n",
    "\n",
    "# Perform Grid Search CV for Random Forest\n",
    "rf_grid_search = GridSearchCV(estimator=rf_model_1, param_grid=param_grid_rf, cv=5, scoring='accuracy')\n",
    "rf_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters for Random Forest\n",
    "best_params_rf = rf_grid_search.best_params_\n",
    "best_score_rf = rf_grid_search.best_score_\n",
    "print(best_params_rf)\n",
    "print(best_score_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "6137aebd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'criterion': 'gini', 'max_depth': 5, 'max_features': 7, 'min_samples_leaf': 1}\n",
      "0.8413615563214654\n"
     ]
    }
   ],
   "source": [
    "# Define the hyperparameter grid for Decision Tree\n",
    "param_grid_dt = {\n",
    "    'max_depth': [2, 3, 5, None],\n",
    "    'max_features': list(range(1, 9)),\n",
    "    'min_samples_leaf': list(range(1, 9)),\n",
    "    'criterion':[\"gini\", \"entropy\"]\n",
    "}\n",
    "\n",
    "# Perform Grid Search CV for Decision Tree\n",
    "dt_grid_search = GridSearchCV(estimator=dt_model_1, param_grid=param_grid_dt, cv=5, scoring='accuracy')\n",
    "dt_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters for Decision Tree\n",
    "best_params_dt = dt_grid_search.best_params_\n",
    "best_score_dt = dt_grid_search.best_score_\n",
    "print(best_params_dt)\n",
    "print(best_score_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "2920d253",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'priors': [0.8, 0.2]}\n",
      "0.5114495237972279\n"
     ]
    }
   ],
   "source": [
    "# Define the hyperparameter grid for Gaussian Naive Bayes\n",
    "param_grid_gnb = {\n",
    "    'priors': [None, [0.2, 0.8], [0.5, 0.5], [0.8, 0.2]],\n",
    "}\n",
    "\n",
    "# Perform grid search for Gaussian Naive Bayes\n",
    "gnb_grid_search = GridSearchCV(estimator=gnb_model_1, param_grid=param_grid_gnb, cv=5, scoring='accuracy')\n",
    "gnb_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters for Gaussian Naive Bayes\n",
    "best_params_gnb = gnb_grid_search.best_params_\n",
    "best_score_gnb = gnb_grid_search.best_score_\n",
    "print(best_params_gnb)\n",
    "print(best_score_gnb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "6ad22c03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'subsample': 0.8, 'n_estimators': 300, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}\n",
      "0.8423624360157849\n"
     ]
    }
   ],
   "source": [
    "# Define the hyperparameter grid for XGBoost\n",
    "param_grid_xgb = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [3, 5, 7],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'subsample': [0.8, 1.0],\n",
    "    'colsample_bytree': [0.8, 1.0],\n",
    "}\n",
    "\n",
    "# Perform Randomized Search CV for XGBoost\n",
    "xgb_random_search = RandomizedSearchCV(estimator=xgb_model_1, param_distributions=param_grid_xgb, cv=5, scoring='accuracy')\n",
    "xgb_random_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters for XGBoost\n",
    "best_params_xgb = xgb_random_search.best_params_\n",
    "best_score_xgb = xgb_random_search.best_score_\n",
    "print(best_params_xgb)\n",
    "print(best_score_xgb)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "ea68b873",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 10.0, 'penalty': 'l2'}\n",
      "0.7768051388076259\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "15 fits failed out of a total of 30.\n",
      "The score on these train-test partitions for these parameters will be set to nan.\n",
      "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
      "\n",
      "Below are more details about the failures:\n",
      "--------------------------------------------------------------------------------\n",
      "15 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/janetng/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/janetng/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py\", line 1461, in fit\n",
      "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
      "  File \"/Users/janetng/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py\", line 447, in _check_solver\n",
      "    raise ValueError(\n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "One or more of the test scores are non-finite: [       nan 0.77067453        nan 0.77636723        nan 0.77680514]\n"
     ]
    }
   ],
   "source": [
    "# Define the hyperparameter grid for Logistic Regression\n",
    "param_grid_logreg = {\n",
    "    'C': [0.1, 1.0, 10.0],\n",
    "    'penalty': ['l1', 'l2']\n",
    "}\n",
    "\n",
    "# Perform Grid Search CV for Logistic Regression\n",
    "logreg_grid_search = GridSearchCV(estimator=logreg_model_1, param_grid=param_grid_logreg, cv=5, scoring='accuracy')\n",
    "logreg_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters for Logistic Regression\n",
    "best_params_logreg = logreg_grid_search.best_params_\n",
    "best_score_logreg = logreg_grid_search.best_score_\n",
    "print(best_params_logreg)\n",
    "print(best_score_logreg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "487bea3b",
   "metadata": {},
   "source": [
    "## **4.5 Finalized Model Training after Tuning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "91ceaa61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Random Forest Model to the training data\n",
    "rf_model = RandomForestClassifier(max_depth=None, max_features='auto', min_samples_leaf=1, \n",
    "                                  min_samples_split=5, n_estimators=200)\n",
    "rf_model.fit(X_train, y_train)\n",
    "y_pred_rf = rf_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "a1e9c562",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Decision Tree Model to the training data\n",
    "dt_model = DecisionTreeClassifier(criterion='gini', max_depth= 5, max_features= 7, min_samples_leaf= 1)\n",
    "dt_model.fit(X_train, y_train)\n",
    "y_pred_dt = dt_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "795ecca2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Gaussian Naive Bayes Model to the training data\n",
    "gnb_model = GaussianNB(priors=[0.8, 0.2])\n",
    "gnb_model.fit(X_train, y_train)\n",
    "y_pred_gnb = gnb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "231cc89a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the XGBoost Model to the training data\n",
    "xgb_model = xgb.XGBClassifier(subsample= 0.8, n_estimators= 300, max_depth= 3, learning_rate= 0.2, colsample_bytree= 0.8)\n",
    "xgb_model.fit(X_train, y_train)\n",
    "y_pred_xgb = xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "9e7b8e38",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the Logistics Regression Model to the training data\n",
    "logreg_model = LogisticRegression(penalty='l2', C=10.0)\n",
    "logreg_model.fit(X_train, y_train)\n",
    "y_pred_logreg = logreg_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f44050ab",
   "metadata": {},
   "source": [
    "## **4.6 Evaluation Metrics**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3207174",
   "metadata": {},
   "source": [
    "### **4.6.1 Accuracy Scores**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "bf1691ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Balanced Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1</th>\n",
       "      <th>Average Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.978775</td>\n",
       "      <td>0.860329</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>0.546008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.975398</td>\n",
       "      <td>0.858571</td>\n",
       "      <td>0.674157</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>0.701754</td>\n",
       "      <td>0.503898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gaussian Naive Bayes</td>\n",
       "      <td>0.041003</td>\n",
       "      <td>0.477368</td>\n",
       "      <td>0.037827</td>\n",
       "      <td>0.951220</td>\n",
       "      <td>0.072761</td>\n",
       "      <td>0.037912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>0.977328</td>\n",
       "      <td>0.842036</td>\n",
       "      <td>0.721519</td>\n",
       "      <td>0.695122</td>\n",
       "      <td>0.708075</td>\n",
       "      <td>0.513604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.966233</td>\n",
       "      <td>0.748564</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.512195</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>0.318076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Model  Accuracy  Balanced Accuracy  Precision    Recall  \\\n",
       "0         Random Forest  0.978775           0.860329   0.731707  0.731707   \n",
       "1         Decision Tree  0.975398           0.858571   0.674157  0.731707   \n",
       "2  Gaussian Naive Bayes  0.041003           0.477368   0.037827  0.951220   \n",
       "3               XGBoost  0.977328           0.842036   0.721519  0.695122   \n",
       "4   Logistic Regression  0.966233           0.748564   0.583333  0.512195   \n",
       "\n",
       "         F1  Average Precision  \n",
       "0  0.731707           0.546008  \n",
       "1  0.701754           0.503898  \n",
       "2  0.072761           0.037912  \n",
       "3  0.708075           0.513604  \n",
       "4  0.545455           0.318076  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_names = ['Random Forest', 'Decision Tree', 'Gaussian Naive Bayes', 'XGBoost', 'Logistic Regression']\n",
    "models = [rf_model, dt_model, gnb_model, xgb_model, logreg_model]\n",
    "\n",
    "# Initialize empty lists to store the evaluation metrics\n",
    "accuracy_scores = []\n",
    "balanced_accuracy_scores = []\n",
    "precision_scores = []\n",
    "recall_scores = []\n",
    "f1_scores = []\n",
    "average_precision_scores = []\n",
    "\n",
    "# Iterate through each model\n",
    "for model in models:\n",
    "    # Make predictions\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate evaluation metrics\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    balanced_accuracy = balanced_accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1 = f1_score(y_test, y_pred)\n",
    "    average_precision = average_precision_score(y_test, y_pred)\n",
    "    \n",
    "    # Append the scores to the respective lists\n",
    "    accuracy_scores.append(accuracy)\n",
    "    balanced_accuracy_scores.append(balanced_accuracy)\n",
    "    precision_scores.append(precision)\n",
    "    recall_scores.append(recall)\n",
    "    f1_scores.append(f1)\n",
    "    average_precision_scores.append(average_precision)\n",
    "\n",
    "# Create a summary DataFrame\n",
    "summary_df_finalized = pd.DataFrame({\n",
    "    'Model': model_names,\n",
    "    'Accuracy': accuracy_scores,\n",
    "    'Balanced Accuracy': balanced_accuracy_scores,\n",
    "    'Precision': precision_scores,\n",
    "    'Recall': recall_scores,\n",
    "    'F1': f1_scores,\n",
    "    'Average Precision': average_precision_scores\n",
    "})\n",
    "\n",
    "summary_df_finalized"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "205aeaaa",
   "metadata": {},
   "source": [
    "### **4.6.2 Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "e13992ab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style(\"darkgrid\")\n",
    "\n",
    "fig, axes = plt.subplots(nrows=5, ncols=1, figsize=(15,10))\n",
    "\n",
    "for cls, ax in zip([rf_model, dt_model, gnb_model, xgb_model, logreg_model], axes.flatten()):\n",
    "    plot_confusion_matrix(cls, \n",
    "                          X_test, \n",
    "                          y_test, \n",
    "                          ax=ax, \n",
    "                          normalize='true',\n",
    "                          cmap='Blues')\n",
    "    ax.title.set_text(type(cls).__name__)\n",
    "    ax.grid(False)\n",
    "plt.tight_layout() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "802f46ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(42)\n",
    "y_pred_allones = pd.Series(np.full(y_test.shape[0], 1, dtype=int), index=y_test.index)\n",
    "y_pred_allzeros = pd.Series(np.full(y_test.shape[0], 0, dtype=int), index=y_test.index)\n",
    "y_pred_random = pd.Series(np.random.randint(2, size=y_test.shape[0]), index=y_test.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "cd1c6c85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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PPfcSvLzC3n99RI8Hg///d+v8NOf/oKlS58jFIqcpnzttd+SkpLK6tUv88ILq/jP/3yRmpoaAEaMGMkLL7xIIBDEbrfz7/++itzcQezZsyseX0GvIg9cEkIIIc5CVyNUFoulQ3vri7gdDud5jXBBy6nG2toaHnzwPvr1609ycjIff/wRu3aVkpSURCDQcs3X0KHDAejTJ5u//W0vFRXlDBo0GKs18iziyy8fCUB5eTnjxn0NAKczidzcQRw+fAiAYcMuA8DtdpGbO6jp52QCAf957YNoISNeQgghxJdASkoqCxc+xbJlP2b9+t/gcrn50Y9+zMyZs/H7G2l+9LKmaW3W69//EsrLP8PvbyQcDvPpp/sByM3NZd++3QD4fF7Kysro379/p9sQF4+MeAkhhBBfEoMGDea22wo5cOBTPv+8nH379mC32xkw4FJOnuz8KTBpaWncffe93HvvXFJT03A4HADccst0li37Md/5zjz8fj9z595DWlp6LHcnIWmqOSL3YMFgOCbz08g8OD2P1KTnkZr0TFKXi+/YsQr69s057/VlHq+e6WLXpbPfk5jP4yWEEEIIITqS4CWEEEIIESMSvIQQQgghYkSClxBCCHEaX4LLoEUcnc/vhwQvIYQQohNmsxWvt07Cl+iUUgqvtw6z2XpO68l0EkIIIUQn0tKyqK4+gcdTc17ra5omoa0Huph1MZutpKVlnds6F+WThRBCiF7GZDKTmdnvvNeXKT56pnjXRU41CiGEEELEiAQvIYQQQogYkeAlhBBCCBEjX4pHBgkhhBBC9AYy4iWEEEIIESMSvIQQQgghYkSClxBCCCFEjEjwEkIIIYSIEQleQgghhBAxIsFLCCGEECJGEi54GYZBcXExhYWFFBUVUVFR0aZ927Zt5OfnU1hYyIYNG+LUy8Ryppps3ryZGTNmMHPmTIqLizEMI049TSxnqkuzhQsX8swzz8S4d4npTDXZt28fs2bN4vbbb+f+++/H7/fHqaeJ5Ux1ef3115k2bRr5+fn85je/iVMvE9PevXspKirqsDyux3qVYP7whz+oRx55RCml1O7du9W9994bbQsEAur6669XNTU1yu/3q+nTp6vKysp4dTVhdFWThoYGNWnSJOXz+ZRSSj344INq69atcelnoumqLs3WrVunCgoK1PLly2PdvYTUVU0Mw1C33HKLKi8vV0optWHDBlVWVhaXfiaaM/2tjB8/XlVXVyu/3x89xojut2bNGjV16lQ1Y8aMNsvjfaxPuBGvnTt3MmHCBACuvPJKPvzww2hbWVkZAwcOJCUlBavVytixYyktLY1XVxNGVzWxWq288sorOBwOAEKhEDabLS79TDRd1QVg9+7d7N27l8LCwnh0LyF1VZODBw+SmprKL3/5S2bPnk1NTQ2DBw+OV1cTypn+VoYPH059fT2BQAClFJqmxaObCWfgwIGsWLGiw/J4H+sTLnh5PB5cLlf0tclkIhQKRdvcbne0LSkpCY/HE/M+JpquaqLrOpmZmQCsXbsWn8/H+PHj49LPRNNVXSorK1m5ciXFxcXx6l5C6qom1dXV7N69m1mzZvHzn/+c9957jx07dsSrqwmlq7oADB06lPz8fG666SauvfZakpOT49HNhHPDDTdgNps7LI/3sT7hgpfL5cLr9UZfG4YRLUz7Nq/X26Y4ont0VZPm18uWLWP79u2sWLFC/rcYI13VZcuWLVRXVzN//nzWrFnD5s2bKSkpiVdXE0ZXNUlNTSUnJ4chQ4ZgsViYMGFCh5EX0T26qssnn3zC22+/zVtvvcW2bduoqqrijTfeiFdXBfE/1idc8BozZgzvvPMOAHv27GHYsGHRtry8PCoqKqipqSEQCFBaWsro0aPj1dWE0VVNAIqLi/H7/axatSp6ylF0v67qMmfOHEpKSli7di3z589n6tSpTJ8+PV5dTRhd1eTSSy/F6/VGL+wuLS1l6NChcelnoumqLm63G7vdjs1mw2QykZ6eTl1dXby6Koj/sb7jGFwvN3nyZLZv387MmTNRSvH000+zadMmfD4fhYWFPProo8ybNw+lFPn5+WRnZ8e7y71eVzUZNWoUGzduZNy4cdx5551A5KA/efLkOPe69zvT34qIvTPVZPHixTz00EMopRg9ejTXXnttvLucEM5Ul8LCQmbNmoXFYmHgwIFMmzYt3l1OSD3lWK8ppVTMPk0IIYQQIoEl3KlGIYQQQoh4keAlhBBCCBEjEryEEEIIIWJEgpcQQgghRIxI8BJCCCGEiBEJXkKIXuGvf/0r3/jGNygqKqKoqIjp06dz//33EwgELmi7hw4doqCgAICJEyfKg6eFEBdEgpcQote46qqrWLt2LWvXrqWkpASLxcK2bdvi3S0hhIhKuAlUhRCJIRAIUFlZSUpKCs8++ywffPABSinuuusubrzxRvbu3cvixYtRSpGdnc0zzzzDvn37WLlyJQCNjY0sW7YMi8US5z0RQvQmEryEEL3Ge++9R1FREadOnULXdQoKCggEAhw6dIhXXnkFv99PQUEB48ePZ+HChTz//PPk5eXx61//mrKyMg4cOMDy5cvJzs5m9erVbNmyhZtvvjneuyWE6EUkeAkheo2rrrqK559/nurqaubOncuAAQP49NNP+eijjygqKgIgFApx5MgRTp06RV5eHgB33HEHAEePHmXx4sU4nU6OHz/OmDFj4rYvQojeSYKXEKLXSUtLY/ny5cyZM4fvf//7fP3rX+epp57CMAxWrVrFgAED6NOnD+Xl5eTm5rJmzRoGDRrEwoUL2bp1Ky6Xi0ceeQR5opoQ4mKT4CWE6JWGDBlCUVERf/rTn+jXrx+zZs3C5/Nx/fXX43K5ePLJJ3nsscfQdZ2srCzuuusubr31VgoKCkhOTiYzM5PKysp474YQopeRh2QLIYQQQsSITCchhBBCCBEjEryEEEIIIWJEgpcQQgghRIxI8BJCCCGEiBEJXkIIIYQQMSLBSwghhBAiRiR4CSGEEELEiAQvIYQQQogY+X/HWmuGpqsM5gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_proba_rf = rf_model.predict_proba(X_test)\n",
    "y_proba_dt = dt_model.predict_proba(X_test)\n",
    "y_proba_gnb = gnb_model.predict_proba(X_test)\n",
    "y_proba_xgb = xgb_model.predict_proba(X_test)\n",
    "y_proba_logreg = logreg_model.predict_proba(X_test)\n",
    "\n",
    "y_score_rf = [x[1] for x in y_proba_rf]\n",
    "y_score_dt = [x[1] for x in y_proba_dt]\n",
    "y_score_gnb = [x[1] for x in y_proba_gnb]\n",
    "y_score_xgb = [x[1] for x in y_proba_xgb]\n",
    "y_score_logreg = [x[1] for x in y_proba_logreg]\n",
    "\n",
    "precision_rf, recall_rf, thresholds_rf = precision_recall_curve(y_test, y_score_rf)\n",
    "precision_dt, recall_dt, thresholds_dt = precision_recall_curve(y_test, y_score_dt)\n",
    "precision_gnb, recall_gnb, thresholds_gnb = precision_recall_curve(y_test, y_score_gnb)\n",
    "precision_xgb, recall_xgb, thresholds_xgb = precision_recall_curve(y_test, y_score_xgb)\n",
    "precision_logreg, recall_logreg, thresholds_logreg = precision_recall_curve(y_test, y_score_logreg)\n",
    "precision_1s, recall_1s, thresholds_1s = precision_recall_curve(y_test, y_pred_allones)\n",
    "precision_0s, recall_0s, thresholds_0s = precision_recall_curve(y_test, y_pred_allzeros)\n",
    "precision_random, recall_random, thresholds_random = precision_recall_curve(y_test, y_pred_random)\n",
    "\n",
    "plt.figure(figsize=(10,8))\n",
    "\n",
    "plt.plot(recall_rf, precision_rf, label='Random Forest')\n",
    "plt.plot(recall_dt, precision_dt, label='Decision Tree')\n",
    "plt.plot(recall_gnb, precision_gnb, label='Gaussian Naive Bayes')\n",
    "plt.plot(recall_xgb, precision_xgb, label='XGBoost')\n",
    "plt.plot(recall_logreg, precision_logreg, label='Logistics Regression')\n",
    "plt.plot(recall_1s, precision_1s, linestyle='--', label='All ones')\n",
    "plt.plot(recall_0s, precision_0s, linestyle='--', label='All zeros')\n",
    "plt.plot(recall_random, precision_random, linestyle='--', label='Random')\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e51bb097",
   "metadata": {},
   "source": [
    "## **5. Model Interpretation**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d29918f",
   "metadata": {},
   "source": [
    "### **5.1 SHAP (Shapley Additive Explanations)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "21b90dfd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x568.8 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "explainer = shap.Explainer(rf_model, X_train)\n",
    "shap_values = explainer.shap_values(X_test)\n",
    "\n",
    "# Plot the SHAP summary plot\n",
    "shap.summary_plot(shap_values, X_test, plot_type='bar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "b9692cee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x568.8 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X_test, plot_type='dot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c44a8395",
   "metadata": {},
   "source": [
    "## **6. Ensemble Model**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee4ed1e0",
   "metadata": {},
   "source": [
    "## **6.1 Ensemble Model Training**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "92ca6f78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the ensemble model\n",
    "ensemble_model = VotingClassifier(estimators=[\n",
    "    ('Random Forest', rf_model),\n",
    "    ('Decision Tree', dt_model),\n",
    "    ('Gaussian Naive Bayes', gnb_model),\n",
    "    ('XGBoost', xgb_model),\n",
    "    ('Logistic Regression', logreg_model)\n",
    "])\n",
    "\n",
    "ensemble_model.fit(X_train, y_train)\n",
    "ensemble_predictions = ensemble_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f845aa",
   "metadata": {},
   "source": [
    "## **6.2 Evaluation of the Ensemble Model**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56f73c17",
   "metadata": {},
   "source": [
    "### **6.2.1 Accuracy Scores**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "5ad299bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Balanced Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1</th>\n",
       "      <th>Average Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ensemble Model</th>\n",
       "      <td>0.96623</td>\n",
       "      <td>0.74856</td>\n",
       "      <td>0.58333</td>\n",
       "      <td>0.5122</td>\n",
       "      <td>0.54545</td>\n",
       "      <td>0.31808</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Accuracy  Balanced Accuracy  Precision  Recall       F1  \\\n",
       "Ensemble Model   0.96623            0.74856    0.58333  0.5122  0.54545   \n",
       "\n",
       "                Average Precision  \n",
       "Ensemble Model            0.31808  "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the ensemble model\n",
    "metrics = {\n",
    "    'Accuracy': accuracy,\n",
    "    'Balanced Accuracy': balanced_accuracy,\n",
    "    'Precision': precision,\n",
    "    'Recall': recall,\n",
    "    'F1': f1,\n",
    "    'Average Precision': average_precision\n",
    "}\n",
    "\n",
    "df_metrics = pd.DataFrame(metrics, index=['Ensemble Model'])\n",
    "df_metrics = df_metrics.round(5)\n",
    "df_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e283cb4",
   "metadata": {},
   "source": [
    "### **6.2.2 Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "7e6633ad",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the normalized confusion matrix\n",
    "plot_confusion_matrix(ensemble_model, X_test, y_test, normalize='true',cmap='Blues')\n",
    "\n",
    "plt.title('Ensemble Model')\n",
    "plt.xlabel('Predicted label')\n",
    "plt.ylabel('True label')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
